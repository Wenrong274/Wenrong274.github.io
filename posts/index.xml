<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Wenrong Nexus</title>
    <link>https://wenrongdev.com/posts/</link>
    <description>Recent content in Posts on Wenrong Nexus</description>
    <generator>Hugo -- 0.124.1</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 22 Jun 2024 19:02:04 +0800</lastBuildDate>
    <atom:link href="https://wenrongdev.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# 淺複製與深複製</title>
      <link>https://wenrongdev.com/posts/csharpshallowcopyanddeepcopy/</link>
      <pubDate>Sat, 22 Jun 2024 19:02:04 +0800</pubDate>
      <guid>https://wenrongdev.com/posts/csharpshallowcopyanddeepcopy/</guid>
      <description>C# 淺複製與深複製</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>之前有講到 <a href="../csharpvaluetypereferencetype">C# Value Type、Reference Type 的差異</a>，現在來講一下淺複製（Shallow Copy）與深複製（Deep Copy）。</p>
<h2 id="淺複製">淺複製</h2>
<p>將原有物件的欄位依照其型別來複製，Value Type 欄位複製其數值到另一個空間，Reference Type 欄位則是複製其參考到另一個空間，因此此兩物件的 Refetence Type 都是參考到同一 instance。</p>
<h3 id="淺複製方式">淺複製方式</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C#" data-lang="C#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Address</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Street = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> City = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Name = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> Age = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Address Address = <span style="color:#66d9ef">new</span> Address();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Person ShallowCopy()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> (Person)<span style="color:#66d9ef">this</span>.MemberwiseClone();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C#" data-lang="C#"><span style="display:flex;"><span>Person origin = <span style="color:#66d9ef">new</span> Person()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Name = <span style="color:#e6db74">&#34;Sam&#34;</span>,
</span></span><span style="display:flex;"><span>    Age = <span style="color:#ae81ff">20</span>,
</span></span><span style="display:flex;"><span>    Address = <span style="color:#66d9ef">new</span> Address()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Street = <span style="color:#e6db74">&#34;123 Main St&#34;</span>,
</span></span><span style="display:flex;"><span>        City = <span style="color:#e6db74">&#34;Anytown&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>Person copy = origin.ShallowCopy();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>copy.Name = <span style="color:#e6db74">&#34;John&#34;</span>;
</span></span><span style="display:flex;"><span>copy.Age = <span style="color:#ae81ff">30</span>;
</span></span><span style="display:flex;"><span>copy.Address.Street = <span style="color:#e6db74">&#34;456 Main St&#34;</span>;
</span></span><span style="display:flex;"><span>copy.Address.City = <span style="color:#e6db74">&#34;Taiwan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Console.WriteLine(<span style="color:#e6db74">&#34;Shallow Copy&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Origin: Sam, 20, 456 Main St, Taiwan</span>
</span></span><span style="display:flex;"><span>Console.WriteLine(<span style="color:#e6db74">$&#34;Origin: {origin.Name}, {origin.Age}, {origin.Address.Street}, {origin.Address.City}&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Copy: John, 30, 456 Main St, Taiwan</span>
</span></span><span style="display:flex;"><span>Console.WriteLine(<span style="color:#e6db74">$&#34;Copy: {copy.Name}, {copy.Age}, {copy.Address.Street}, {copy.Address.City}&#34;</span>);
</span></span></code></pre></div><p>輸出結果</p>
<p><code>Origin: Sam, 20, 456 Main St, Taiwan</code></p>
<p><code>Copy: John, 30, 456 Main St, Taiwan</code></p>
<p><code>Name</code> 是 String，可是沒有跟著改變，可以先看<a href="../csharpreferencetypestring">C# Reference Type String</a>這篇。</p>
<p><code>Age</code> 是 int，也是 Value Type，所以會改變。</p>
<p><code>Address</code> 是 class 是 Reference Type，因為淺複製的關係導致他們（Origin、Copy）有一起改變</p>
<h2 id="深複製">深複製</h2>
<p>ValueType 與<code>淺複製</code>相同，主要差異是<code>深複製</code>的 Reference Type 欄位會產生新的 instance，所以其倆欄位是參考到不同 instance 的。</p>
<h3 id="深複製方式">深複製方式</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C#" data-lang="C#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Address</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Street = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> City = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Name = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> Age = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Address Address = <span style="color:#66d9ef">new</span> Address();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Person DeepCopy()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Person clone = (Person)<span style="color:#66d9ef">this</span>.MemberwiseClone();
</span></span><span style="display:flex;"><span>        clone.Address = <span style="color:#66d9ef">new</span> Address
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Street = <span style="color:#66d9ef">this</span>.Address.Street,
</span></span><span style="display:flex;"><span>            City = <span style="color:#66d9ef">this</span>.Address.City
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> clone;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C#" data-lang="C#"><span style="display:flex;"><span>Person origin = <span style="color:#66d9ef">new</span> Person()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Name = <span style="color:#e6db74">&#34;Sam&#34;</span>,
</span></span><span style="display:flex;"><span>    Age = <span style="color:#ae81ff">20</span>,
</span></span><span style="display:flex;"><span>    Address = <span style="color:#66d9ef">new</span> Address()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Street = <span style="color:#e6db74">&#34;123 Main St&#34;</span>,
</span></span><span style="display:flex;"><span>        City = <span style="color:#e6db74">&#34;Anytown&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>Person copy = origin.DeepCopy();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>copy.Name = <span style="color:#e6db74">&#34;John&#34;</span>;
</span></span><span style="display:flex;"><span>copy.Age = <span style="color:#ae81ff">30</span>;
</span></span><span style="display:flex;"><span>copy.Address.Street = <span style="color:#e6db74">&#34;456 Main St&#34;</span>;
</span></span><span style="display:flex;"><span>copy.Address.City = <span style="color:#e6db74">&#34;Taiwan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Console.WriteLine(<span style="color:#e6db74">&#34;Shallow Copy&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Origin: Sam, 20, 123 Main St, Anytown</span>
</span></span><span style="display:flex;"><span>Console.WriteLine(<span style="color:#e6db74">$&#34;Origin: {origin.Name}, {origin.Age}, {origin.Address.Street}, {origin.Address.City}&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Copy: John, 30, 456 Main St, Taiwan</span>
</span></span><span style="display:flex;"><span>Console.WriteLine(<span style="color:#e6db74">$&#34;Copy: {copy.Name}, {copy.Age}, {copy.Address.Street}, {copy.Address.City}&#34;</span>);
</span></span></code></pre></div><p><code>Origin: Sam, 20, 123 Main St, Anytown</code></p>
<p><code>Copy: John, 30, 456 Main St, Taiwan</code></p>
<p>與淺複製的差異，深複製的 <code>Address</code> 欄位也會產生新的 instance，在修改 <code>copy.Address</code> 時，不會影響到 <code>origin.Address</code>。</p>
<h2 id="參考連結">參考連結</h2>
<p><a href="https://dotblogs.com.tw/lazycodestyle/2016/06/18/183737">C# 複製物件的方式比較</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>C# Reference Type String</title>
      <link>https://wenrongdev.com/posts/csharpreferencetypestring/</link>
      <pubDate>Sat, 22 Jun 2024 17:40:52 +0800</pubDate>
      <guid>https://wenrongdev.com/posts/csharpreferencetypestring/</guid>
      <description>淺談 C# Reference Type String</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>之前有提到 <a href=".../csharpvaluetypereferencetype">C# Value Type、Reference Type 的差異</a>，提到 String 是 Reference Type，可是在使用時卻很像 Value Type。</p>
<h3 id="比較值">比較值</h3>
<p>Value Type 以 <code>int</code> 為舉例</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a = <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> b = a;
</span></span><span style="display:flex;"><span>a = <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>Console.WriteLine(a == b); <span style="color:#75715e">// 輸出: false</span>
</span></span></code></pre></div><p><code>b</code> 並沒有隨著 <code>a</code> 改變，看得出 int 是 Value Type。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">string</span> str1 = <span style="color:#e6db74">&#34;abc&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">string</span> str2 = str1;
</span></span><span style="display:flex;"><span>str1 = <span style="color:#e6db74">&#34;def&#34;</span>;
</span></span><span style="display:flex;"><span>Console.WriteLine(str1 == str2); <span style="color:#75715e">// 輸出:  false</span>
</span></span></code></pre></div><p>修改 str1 卻沒有影響到 str2，所以會覺得 string 也是 Value Type(?)。</p>
<h3 id="比較地址">比較地址</h3>
<p>使用 <code>object.ReferenceEquals</code> 來比較，假如是 Value Type，則會輸出 <code>false</code>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a = <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> b = <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>Console.WriteLine(<span style="color:#66d9ef">object</span>.ReferenceEquals(a, b)); <span style="color:#75715e">// 輸出: false</span>
</span></span></code></pre></div><p><code>int</code> 確實是 Value Type，所以會輸出 false。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">string</span> str1 = <span style="color:#e6db74">&#34;abc&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">string</span> str2 =  <span style="color:#e6db74">&#34;abc&#34;</span>;
</span></span><span style="display:flex;"><span>Console.WriteLine(<span style="color:#66d9ef">object</span>.ReferenceEquals(str1, str2)); <span style="color:#75715e">// 輸出: true</span>
</span></span></code></pre></div><p>比較結果為 true，假如 String 是 Value Type，應該會與 int 的結果一樣會是 false。</p>
<p>也就是 String 其實是 Reference Type。</p>
<h2 id="string-為什麼是-reference-type">String 為什麼是 Reference Type</h2>
<p><a href="https://blog.csdn.net/daigualu/article/details/59096659">.NET 框架-string 是 value or reference type?</a></p>
<p>這裡面提到兩點</p>
<ul>
<li>
<p>String 對象，若值相同，則其引用地址相同。</p>
</li>
<li>
<p>String 對象，若值不等，則其引用地址不等。</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">string</span> str1 = <span style="color:#e6db74">&#34;abc&#34;</span>; <span style="color:#75715e">//str1指向記憶體位置 addressA 為 abc</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">string</span> str2 = str1; <span style="color:#75715e">//str2指向記憶體位置 addressA</span>
</span></span><span style="display:flex;"><span>str1 = <span style="color:#e6db74">&#34;def&#34;</span>; <span style="color:#75715e">//str1新指向記憶體位置 addressB 為 def</span>
</span></span><span style="display:flex;"><span>Console.WriteLine(str1 == str2); <span style="color:#75715e">// 輸出:  false</span>
</span></span></code></pre></div><h2 id="string-特點">String 特點</h2>
<p>String 特點就是具有不可變性（immutable），一旦 new String 在記憶體(managed heap)上為它分配一塊連續記憶體空間，我們將不能以任何方式對這個 String 進行修改。所有對這個 String 進行各項操作而返回的 String，實際上是另一個重新 new 的 String，其本身並不會產生任何變化。</p>
<h3 id="string-效能如何">String 效能如何？</h3>
<p>從上面就可以知道 String 有不可變性，一旦創建了就不能修改值，每次修改 String 都會產生一個新的 String，所以 String 效能比較低。</p>
<p>所以需要經常性操作 String 可以考慮使用 <a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.text.stringbuilder?view=net-8.0">StringBuilder</a>。</p>
<h2 id="結論">結論</h2>
<p>來自 ChatGPT 的解釋</p>
<p>C# String 有以下特性：</p>
<ul>
<li>
<p>String 有不可變性：一旦創建 string，它的內容就不能被改變。</p>
</li>
<li>
<p>賦值操作的實際行為：當執行 <code>str = &quot;abc&quot;</code> 時，實際上是創建了一個新的 string 對象，而不是修改原有的對象。然後，變量 <code>str</code> 被重新指向這個新對象。</p>
</li>
<li>
<p>為什麼 str2 不變：當執行 <code>string str2 = str1</code> 時，str1 和 str2 確實指向了同一個對象。但是當 str1 被賦予新值時，它指向了一個新對象，而 str2 仍然指向原來的對象。</p>
</li>
<li>
<p>值類型的行為：這種行為看起來很像值類型，但 string 仍然是引用類型。這是因為 string 的不可變性和特殊的內存管理方式。</p>
</li>
<li>
<p>性能和內存管理：這種設計有助於提高性能和簡化內存管理，特別是在字符串被廣泛使用的情況下。</p>
</li>
<li>
<p>字符串池（String Interning）：C#使用字符串池來優化內存使用。相同的字符串字面量會指向內存中的同一位置。</p>
</li>
</ul>
<p>這種行為是 C# 語言設計的一個特點，旨在結合引用類型的靈活性和值類型的一些優勢。它可能看起來有點反直覺，但在實際使用中通常是有益的。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>C# Class 和 Struct 選擇</title>
      <link>https://wenrongdev.com/posts/csharpclassandstruct/</link>
      <pubDate>Wed, 12 Jun 2024 22:47:08 +0800</pubDate>
      <guid>https://wenrongdev.com/posts/csharpclassandstruct/</guid>
      <description>C# Class 和 Struct 選擇</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>之前有講到 <a href="../csharpvaluetypereferencetype">C# Value Type、Reference Type 的差異</a>，現在來講一下 Class 和 Struct 選擇。</p>
<p>從上一篇的文章中可以知道 Class 是 Reference type，而 Struct 是 Value type。</p>
<h2 id="如何選擇">如何選擇</h2>
<p>根據<a href="https://learn.microsoft.com/zh-tw/dotnet/standard/design-guidelines/choosing-between-class-and-struct">在類別和結構之間選擇</a></p>
<blockquote>
<p>作為經驗規則，架構中大部分的類型應該為類別。 不過，在某些情況下，實值型別的特性會使它更適合使用結構。</p>
</blockquote>
<p>可以知道其實大部分時都是使用 Class，但在某些情況下使用 Struct 會比較適合。</p>
<h3 id="什麼時候使用-struct">什麼時候使用 Struct</h3>
<p><strong>如果類型的執行個體很小，且通常短期或通常內嵌在其他物件中，請考慮定義結構，而不是類別。</strong></p>
<p>除非類型具有下列所有特性，否則請「避免」定義結構：</p>
<ul>
<li>
<p>其以邏輯方式表示單一值，類似於基本類型 (int、double 等)。</p>
</li>
<li>
<p>其執行個體大小低於 16 個位元組。</p>
</li>
<li>
<p>類型為不可變，</p>
</li>
<li>
<p>而且不需要經常進行 Box。</p>
</li>
</ul>
<p><strong>在所有其他情況下，您應該將類型定義為類別。</strong></p>
<h2 id="參考連結">參考連結</h2>
<p><a href="https://hackmd.io/@SuFrank/H1coLlCaq">一起學 Class and Struct (C#)</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>C# Value Type、Reference Type 的差異</title>
      <link>https://wenrongdev.com/posts/csharpvaluetypereferencetype/</link>
      <pubDate>Tue, 11 Jun 2024 22:38:53 +0800</pubDate>
      <guid>https://wenrongdev.com/posts/csharpvaluetypereferencetype/</guid>
      <description>討論 C# Value Type、Reference Type 的差異</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>在公司讀書會與同事討論淺複製與深複製的差異和使用時機時，聊到 Reference Type、Value Type 的不同，但是要講淺複製與深複製之前要先講 Reference Type、Value Type 的差異。</p>
<h2 id="value-type-有哪些">Value Type 有哪些</h2>
<ol>
<li>
<p>整數的數字型別：sbyte、byte、short、ushort、int、uint、long、ulong、nint、nuint</p>
</li>
<li>
<p>浮點數值型別：float、double、decimal</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/language-reference/builtin-types/numeric-conversions">內建數值轉換</a></p>
</li>
<li>
<p>bool</p>
</li>
<li>
<p>char</p>
</li>
<li>
<p>enum</p>
</li>
<li>
<p>struct</p>
</li>
<li>
<p>ref struct</p>
</li>
<li>
<p>tuples</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/language-reference/builtin-types/nullable-value-types">可為 Null 的值類型 (C# 參考)</a></p>
</li>
</ol>
<p>參考：<a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/language-reference/builtin-types/value-types">實值類型 (C# 參考)</a></p>
<h2 id="reference-type-有哪些">Reference Type 有哪些</h2>
<ol>
<li>
<p>宣告參考型別：class、interface、delegate、record</p>
</li>
<li>
<p>內建參考類型：dynamic、object、string</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/language-reference/builtin-types/nullable-reference-types">可為 Null 的參考型別</a></p>
</li>
<li>
<p>集合和陣列：集合（List、Dictionary）、陣列（int[]、string[]）</p>
</li>
</ol>
<p>參考：<a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/language-reference/keywords/reference-types">參考型別 (C# 參考)</a></p>
<h2 id="value-typereference-type-的差異">Value Type、Reference Type 的差異</h2>
<p>根據<a href="https://learn.microsoft.com/zh-tw/dotnet/standard/design-guidelines/choosing-between-class-and-struct">在類別和結構之間選擇</a>裡的一段話，可以分出 5 點差異。</p>
<h3 id="1-存放記憶體">1. 存放記憶體</h3>
<blockquote>
<p>參考型別會配置在回收的堆積和記憶體上，而實值型別則會配置在堆疊上，或內嵌在包含型別上，並在堆疊回溯時或其包含類型解除配置時解除配置。</p>
<p>因此，實值型別的配置和解除配置的成本通常比參考型別的配置和解除配置的成本更低。</p>
</blockquote>
<p>可以得知主要是在存放的記憶體差異，因此 Value Type 配置和解除配置的成本比 Reference Type 成本更低。</p>
<p>實值型別的配置和解除配置的成本通常比參考型別的配置和解除配置的成本更低。</p>
<h3 id="2-陣列">2. 陣列</h3>
<blockquote>
<p>參考型別的陣列會以換行方式配置，這表示陣列元素只是位於堆積上之參考型別執行個體的參考。實值型別陣列會內嵌配置，這表示陣列元素是實值型別實際的執行個體。</p>
<p>因此，實值型別陣列的配置和解除配置的成本會遠比參考型別陣列的配置和解除配置的成本來得低。此外，在大部分情況下，實值型別陣列會呈現較佳的參考位置。</p>
</blockquote>
<p>Value Type 陣列的配置和解除配置成本較低，且通常在記憶體存取表現上優於 Reference Type 陣列。然而，Reference Type 陣列在處理複雜的物件或需要物件參考的情境中仍有其必要性。</p>
<h3 id="3-記憶體使用量">3. 記憶體使用量</h3>
<blockquote>
<p>強制轉型為參考型別或其實作的其中一個介面時，實值型別會進行 Boxed。 當強制轉型回實值型別時，它們會進行 Unboxed。</p>
<p>因為 Box 是配置在堆積上且被回收記憶體的物件，所以過多 Boxing 和 unboxing 可能會對堆積、記憶體回收行程，以及最終是應用程式的效能造成負面影響。</p>
</blockquote>
<p>強制轉型為 Reference Type 時，Value Type 會進行 Boxed。 當強制轉型回實值型別時會進行 Unboxed，過多的 Boxed 和 Unboxed 會增加垃圾回收（GC）的負擔，從而影響應用程式效能。</p>
<h3 id="4-複製參考">4. 複製參考</h3>
<blockquote>
<p>參考型別指派會複製參考，而實值型別指派則會複製整個值。 因此，大型參考型別的指派成本比大型實值型別的指派成本更低。</p>
</blockquote>
<h3 id="5-傳遞方式">5. 傳遞方式</h3>
<blockquote>
<p>參考型別會以傳址方式傳遞，而實值型別則是以傳值方式傳遞。對參考型別的執行個體所做的變更會影響所有指向執行個體的參考。實值型別執行個體會在以傳值方式傳遞時複製。變更實值型別的執行個體時，它必然不會影響其任何複本。</p>
<p>由於不會由使用者明確建立複本，而是會在傳回引數或傳回值時隱含建立，因此可以變更的實值型別可能會對許多使用者造成混淆。 因此，實值型別應該為不可變。</p>
</blockquote>
<p>由於 Value Type 在傳遞過程中會複製，變更複本時不會影響原始值，這有時會讓使用者感到困惑，因為預期的變更並未反映在原始變數上。</p>
<p>為了避免這種混淆，Value Type 通常應設計為不可變（immutable）。不可變的 Value Type 一旦創建，其狀態就無法改變，這樣可以確保每個複本都是一致且獨立的。</p>
<ul>
<li>Reference Type</li>
</ul>
<p>傳遞物件的記憶體地址。因此，對該物件所做的變更會影響所有持有該物件地址的參考。</p>
<p>當 Reference Type 的物件進行變更時，因為所有指向該物件的參考都是同一個實例，所有持有該參考的變數都會受到變更影響。</p>
<ul>
<li>Value Type</li>
</ul>
<p>會複製該值並將複本傳遞給目標位置。因此，對複本的變更不會影響原始值。</p>
<p>當傳遞 Value Type 並對其進行變更時，因為是對複本進行操作，原始實例不會受到任何影響。這意味著每個複本都是獨立的。</p>
<h2 id="參考連結">參考連結</h2>
<p><a href="https://hackmd.io/@SuFrank/H1coLlCaq">一起學 Class and Struct</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>心得 虛擬代理模式</title>
      <link>https://wenrongdev.com/posts/designpattern-virtualproxy/</link>
      <pubDate>Tue, 30 Apr 2024 00:39:46 +0800</pubDate>
      <guid>https://wenrongdev.com/posts/designpattern-virtualproxy/</guid>
      <description>主要是針對深入淺出設計模式書籍，提到的代理模式的心得。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>這篇主要是在講虛擬代理人的實作部分。</p>
<p>實作的主題的方向是讀取<a href="https://opendata.cwa.gov.tw">中央氣象署</a>的氣象資訊。利用中央氣象署的 <a href="https://opendata.cwa.gov.tw/dist/opendata-swagger.html">API</a> 呼叫後，取得氣象資訊，並且在等待回應時實作虛擬代理設計。</p>
<h2 id="uml--build">UML &amp; Build</h2>
<p><img loading="lazy" src="https://i.imgur.com/FmnyNhG.png" alt="uml"  />
</p>
<p><img loading="lazy" src="https://i.imgur.com/r8KdOgM.png" alt="build"  />
</p>
<h2 id="weatherproxy">WeatherProxy</h2>
<p>使用 weather is null 判斷是否成功取得資料，並且 <code>weatherDataTask == null || weatherDataTask.Status != TaskStatus.Running</code> 來防止重複取得資料。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> GetWeather(<span style="color:#66d9ef">string</span> area)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (weather != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> weather.GetWeather(area);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (weatherDataTask == <span style="color:#66d9ef">null</span>|| weatherDataTask.Status != TaskStatus.Running)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                weatherDataTask = Task.Run(FetchWeatherData);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;天氣資料更新中...\n&#34;</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>完整程式碼</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">WeatherProxy</span> : IWeather
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/// &lt;summary&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/// https://opendata.cwa.gov.tw</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/// https://opendata.cwa.gov.tw/dist/opendata-swagger.html</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/// &lt;/summary&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">string</span> Url = <span style="color:#e6db74">&#34;https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-D0047-073&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">string</span> AuthorizationKey = <span style="color:#e6db74">&#34;AuthorizationKey&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">string</span> Format = <span style="color:#e6db74">&#34;JSON&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> IWeather weather;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Task weatherDataTask;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> GetWeather(<span style="color:#66d9ef">string</span> area)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (weather != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> weather.GetWeather(area);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (weatherDataTask == <span style="color:#66d9ef">null</span>|| weatherDataTask.Status != TaskStatus.Running)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                weatherDataTask = Task.Run(FetchWeatherData);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;天氣資料更新中...\n&#34;</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">async</span> Task FetchWeatherData()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        weather = <span style="color:#66d9ef">new</span> Weather(<span style="color:#66d9ef">await</span> SendRequest());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">async</span> Task&lt;Root&gt; SendRequest()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">using</span> var client = <span style="color:#66d9ef">new</span> HttpClient();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> query = HttpUtility.ParseQueryString(<span style="color:#66d9ef">string</span>.Empty);
</span></span><span style="display:flex;"><span>        query[<span style="color:#e6db74">&#34;Authorization&#34;</span>] = AuthorizationKey;
</span></span><span style="display:flex;"><span>        query[<span style="color:#e6db74">&#34;format&#34;</span>] = Format;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> builder = <span style="color:#66d9ef">new</span> UriBuilder(Url);
</span></span><span style="display:flex;"><span>        builder.Query = query.ToString();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> requestUri = builder.ToString();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> responseJson = <span style="color:#66d9ef">await</span> client.GetStringAsync(requestUri);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">string</span>.IsNullOrEmpty(responseJson) ? <span style="color:#66d9ef">null</span> : JsonSerializer.Deserialize&lt;Root&gt;(responseJson);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="githubrepo"><a href="https://github.com/Wenrong274/WeatherForecast">GitHub</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>心得 代理人模式</title>
      <link>https://wenrongdev.com/posts/designpattern-proxy/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/designpattern-proxy/</guid>
      <description>主要是針對深入淺出設計模式書籍，提到的代理人模式的心得。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>主要是用來解決大部與後端同步資料的方法，在實作方面代理人模式是最常見的解決方案。</p>
<h2 id="討論">討論</h2>
<h3 id="q1-代理人模式實作方向問題">Q1 代理人模式實作方向問題</h3>
<p><code>多人連線後與後端資料同步</code></p>
<p>不過確實在實作主題選擇有限，尤其遠端代理需要與後端同步資料，在目前公司遊戲的架構是不需要這樣做的。</p>
<h3 id="q2-需要與後端同步記憶體資料嗎">Q2 需要與後端同步記憶體資料嗎？</h3>
<p>不一定，<a href="https://docs.oracle.com/javase/tutorial/rmi/">Java RMI</a>、<a href="https://learn.microsoft.com/zh-tw/dotnet/framework/wcf/?redirectedfrom=MSDN">C# WCF</a>、<a href="https://developer.android.com/develop/background-work/services/aidl?hl=zh-tw">Android AIDL</a> 可以做到同步記憶體資料。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>心得 狀態模式</title>
      <link>https://wenrongdev.com/posts/designpattern-state/</link>
      <pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/designpattern-state/</guid>
      <description>主要是針對深入淺出設計模式書籍，提到的狀態模式的心得。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>狀態模式主要用來解決多個 <code>if else</code> 判斷，並且不會因為多了一個 <code>if</code>，導致很多方法都要重新寫判斷。</p>
<h2 id="討論">討論</h2>
<p>我提出的問題是狀態模式是由狀態(State) 來控制前往哪個 State，為什麼不是狀態機(Context)來去控制 State 流程。</p>
<ul>
<li>State 控制 State 切換</li>
</ul>
<p>優點：控制流程可以簡化 if else 的判斷，因為在 State 會少很多判斷。</p>
<p>缺點：也因為在 State 裡面判斷，在 Context 是無法知道什麼時候切換 State。</p>
<ul>
<li>Context 控制 State 切換</li>
</ul>
<p>優點：可以明確的知道切換時機，並且也知道切換的 State。</p>
<p>缺點：在 Context 切換 State 會有較多的 <code>if else</code> 判斷。</p>
<h2 id="結論">結論</h2>
<p>結論策略模式(Strategy Pattern)與狀態模式的差異，有同事提出是 <code>State 控制 State 切換</code>。假如由 Context 控制 State 切換，就跟策略模式類似。</p>
<p>我後來想想也有點道理，Context 控制 State 切換並沒有解決多個 <code>if else</code> 判斷，且與策略模式類似。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>心得 組合模式</title>
      <link>https://wenrongdev.com/posts/designpattern-composite/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/designpattern-composite/</guid>
      <description>主要是針對深入淺出設計模式書籍，提到的組合模式的心得。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>組合模式是需要 Leaf（子節點）的嗎？</p>
<p>這是我提出來的問題，因為我覺得 Composite，同時也繼承了 Component，這樣跟 Leaf 也有繼承 Component 差不多。</p>
<p>後來我覺得也許拆開是為了職責問題，Composite、Leaf 實現功能可能不一樣。</p>
<p>我後來也參考了別人的<a href="https://andyludeveloper.medium.com/design-pattern-%E7%B5%84%E5%90%88%E6%A8%A1%E5%BC%8F-composite-pattern-ca0d5e0309dc">定義</a>，其中 Composite、Leaf 的定義有明確職責。</p>
<blockquote>
<ul>
<li>Component: 是一個抽象類別，組合模式中的物件都繼承此類別。其中， inflate() 是每一個物件都要實作的功能。 add(Component) 以及 remove(Component) 都是提供給 Composite 類別組合 Leaf 使用的。</li>
<li>Leaf : 是一個具象類別 (Concrete class)，實作 Component 所定義的 inflate()方法，為一個最小單位的物件，在這裏不能包含其他 Leaf 。</li>
<li>Composite ：同樣也是一個具象類別 (Concrete class)，除了實作 Component 定義的 inflate() 方法。將多個 Leaf 紀錄在一個列表 components 裡利用 add(Component) 以及 remove(Component) 來對列表做處理。</li>
</ul>
</blockquote>
<h2 id="結論">結論</h2>
<p>讀完這章節後，在我的個人是沒想到自己能使用的環境，可能使用環境是偏像資料搜尋、物件搜尋等。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>心得 迭代器模式</title>
      <link>https://wenrongdev.com/posts/designpattern-iterator/</link>
      <pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/designpattern-iterator/</guid>
      <description>主要是針對深入淺出設計模式書籍，提到的迭代器模式的心得。</description>
      <content:encoded><![CDATA[<h2 id="ienumeratorienumerable-使用-forforeach-的差別">IEnumerator、IEnumerable 使用 for、foreach 的差別</h2>
<p>Q：實作發現 IEnumerable 能使用 foreach、不能使用 for，IEnumerator 能使用 for、不能使用 foreach，這是為什麼。</p>
<p>A：IEnumerator 是無法使用 for，foreach 就是跑迭代器。需要有 index 的概念建議使用 for。</p>
<p>Aforeach 裡面的 List 陣列有改變的話，會出現錯誤。</p>
<h2 id="c-迭代器延遲執行">C# 迭代器延遲執行</h2>
<p>A：使用 LinQ 時需要注意到延遲執行的部分。</p>
<h2 id="是否能夠使用迭代器製作-c-list">是否能夠使用迭代器製作 C# List</h2>
<p>A：可以，可是想自己寫 <code>yield return</code> 是無法的這是 C# 內建的。</p>
<h2 id="c-底層都有繼承-ienumerable-那是否不需要迭代器模式了">C# 底層都有繼承 IEnumerable 那是否不需要迭代器模式了？</h2>
<p>A：實作不太可能，因為會為了做而做，除非是這個類別很特別才需要。</p>
<h2 id="unity-使用-forforeach-的效能使用-foreach-會比較耗效能嗎">Unity 使用 for、foreach 的效能，使用 foreach 會比較耗效能嗎？</h2>
<p>A：這是 Unity 舊版 bug。一般用法還好除非是在 Update 使用 foreach 才會有明顯的差異。</p>
<p>A：因為 Unity C# 與 MS C# 不太一樣，在使用 Unity 物件時不要使用 <code>?.</code> 的方式。</p>
<p><a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/language-reference/operators/member-access-operators#null-conditional-operators--and-">Null 條件運算子 ?. 和 ?[]</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>A?.B();
</span></span></code></pre></div><h2 id="更理解迭代器運作方式">更理解迭代器運作方式</h2>
<p>可以先理解 LinQ 運作方式，就可以知道內部迭代跟外部的差異。</p>
<p>再來可以理解 C# IEnumerator、IEnumerable，要搭配 for、foreach，並且搭配 yield return，就可以理解 yield return 在迭代器的概念。</p>
<p>最後實作 Unity 協成(Coroutine)，寫一個方法 to IEnumerator 並且使用 StarCoroutine，並且不使用 UnityEngine。</p>
<h2 id="ienumerable-在方法上使用是什麼情況會使用到">IEnumerable 在方法上使用是什麼情況會使用到？</h2>
<p>A：延遲執行，可以在需要使用的時候再呼叫就可。</p>
<p>Q：假如不懂的話是不是會是一個坑？</p>
<p>A：非同步執行或感受非同步執行時使用。希望執行這行程式的時候，不要卡死在這邊，延遲執行可以等資料匯入後再執行。不懂的人使用確實會是一個坑。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>心得 模板模式</title>
      <link>https://wenrongdev.com/posts/designpattern-template/</link>
      <pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/designpattern-template/</guid>
      <description>主要是針對深入淺出設計模式書籍，提到的模板模式的心得。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>模板模式最基礎的概念就是需要一個<code>骨架</code>(abstract class)，利用不同<code>方法</code>或<code>流程</code>來實作，算是很常見的設計模式之一。</p>
<p>模板模式的<code>骨架</code>可搭配泛型使用，可是不能說使用泛型就是模板模式，主要還是要符合<code>骨架</code>、有不同的<code>方法</code>或<code>流程</code>，這幾個要點來區分。</p>
<h2 id="掛勾">掛勾</h2>
<p>掛勾的部分，主要利用掛勾來實現方法職責，讓模板模式彈性更多一些。在模板模式中掛勾主要是用來判斷流程走向。</p>
<h2 id="模板模式-vs-策略模式">模板模式 vs 策略模式</h2>
<p>策略模式主要是針對行為來制定，而模板模式使用相同的<code>骨架</code>，實作不同的內容、流程。</p>
<p>差異會在有沒有相同<code>骨架</code>、<code>流程</code>，在這部分則不是策略模式的重點。</p>
<p>策略模式主軸是利用抽換不同的介面達到功能效果。</p>
<h2 id="好萊塢守則-vs-依賴反轉">好萊塢守則 vs 依賴反轉</h2>
<ul>
<li>好萊塢守則</li>
</ul>
<p>只是思想，即「不要打電話給我們，我們會打給你」。相較於高階模組、低階模組，就沒有強制規定要不要符合，所以才是一種思想而不是一個設計概念。</p>
<ul>
<li>依賴反轉原則</li>
</ul>
<ol>
<li>
<p>高階模組不應該依賴於低階模組，兩者都應該依賴於抽象介面。</p>
</li>
<li>
<p>抽象介面不應該依賴於具體實現。而具體實現則應該依賴於抽象介面。</p>
</li>
</ol>
<p>依賴反轉原則確實符合好萊塢守則的概念。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>心得 表象模式</title>
      <link>https://wenrongdev.com/posts/designpattern-facade/</link>
      <pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/designpattern-facade/</guid>
      <description>主要是針對深入淺出設計模式書籍，提到的表象模式的心得。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>當本身有所有使用到類別，就不必使用表象模式。也就是表象模式是需要有各種次系統組裝而成的模式，而不是覺得這邊很複雜就用表象模式。</p>
<p>表象模式所有的次系統，必須要傳遞進來的物件，自己不能夠封裝類別。</p>
<p>表象模式不建議使用抽象(interface、abstract)，除非真的知道功能需求。</p>
<p>表象模式傳遞進來的次系統，不一定需要是介面，也可以傳遞實體物件。</p>
<h2 id="觀念">觀念</h2>
<h3 id="封裝成方法跟使用表象模式的差異">封裝成方法跟使用表象模式的差異</h3>
<table>
<thead>
<tr>
<th style="text-align:left">特性</th>
<th style="text-align:left">表象模式</th>
<th style="text-align:left">封裝成方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">目的</td>
<td style="text-align:left">簡化介面</td>
<td style="text-align:left">提高模組化和可重用性</td>
</tr>
<tr>
<td style="text-align:left">應用範圍</td>
<td style="text-align:left">複雜的系統</td>
<td style="text-align:left">任何程式碼</td>
</tr>
<tr>
<td style="text-align:left">實現方式</td>
<td style="text-align:left">使用介面類別來封裝系統</td>
<td style="text-align:left">使用方法來封裝邏輯</td>
</tr>
</tbody>
</table>
<p>表象模式和封裝成方法都是有用的設計模式。表象模式可以用於簡化複雜系統的介面，而封裝成方法可以用於提高程式碼的模組化和可重用性。兩者可以結合使用以獲得更好的效果。</p>
<h2 id="迪米特守則">迪米特守則</h2>
<p>要注意迪米特守則，使用過度會讓 code 過多，理解難度增加，不必須要為了符合守則而寫出奇怪的設計。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Wix Examples</title>
      <link>https://wenrongdev.com/posts/wixexamples/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/wixexamples/</guid>
      <description>主要是用來打包程式輸出成 .msi 檔</description>
      <content:encoded><![CDATA[<p>主要是用來打包程式輸出成 <code>.msi</code> 檔（<a href="https://zh.wikipedia.org/zh-tw/Windows_Installer">Windows Installer</a>）。</p>
<p>建議先看完 「<a href="https://ithelp.ithome.com.tw/users/20139206/ironman/3901">30 天 | C# WixToolset + WPF 帥到不行的安裝包 系列</a>」，能夠把 80% 以上的問題解決。</p>
<h3 id="輸出-wix-文件方法">輸出 Wix 文件方法</h3>
<p>先到 <a href="https://github.com/wixtoolset/wix3/releases">WiX Toolset Release</a> 安裝需要的工具。</p>
<p>需要開啟 <a href="https://zh.wikipedia.org/zh-tw/cmd.exe">CMD</a> 且必須要用<code>工作管理員權限</code>打開，之後 cd 到 WiX Toolset 的安裝資料夾。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>C:\Program Files (x86)\WiX Toolset v3.11\bin
</span></span></code></pre></div><p><img loading="lazy" src="https://i.imgur.com/ovuJCka.png" alt="img_1"  />
</p>
<h4 id="heatexe">heat.exe</h4>
<p>可以掃描目錄中的所有文件和子目錄，並生成 WiX 文件中所需的 Component、Directory、File 和其他元素的定義。</p>
<p>使用下面的參數可以拿到 <code>myKeyIn.wxs</code>。需要把 [MyDemo] 替換成正確的路徑，可以參考我的 <code>Product.wxs</code>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>heat.exe dir &#34;[PUT_YOUR_PATH]&#34; -dr INSTALLFOLDER -cg ProductComponents -gg -gl -sf -srd -var &#34;[MyDemo]&#34; -out &#34;[PUT_YOUR_OUTPUT_PATH]\myKeyIn.wxs&#34;
</span></span></code></pre></div><table>
<thead>
<tr>
<th style="text-align:left">參數名稱</th>
<th style="text-align:left">解釋</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[PUT_YOUR_PATH]</td>
<td style="text-align:left">需要打包的路徑資料夾</td>
</tr>
<tr>
<td style="text-align:left">[MyDemo]</td>
<td style="text-align:left">WiX 文件中要使用的變數</td>
</tr>
<tr>
<td style="text-align:left">[PUT_YOUR_OUTPUT_PATH]</td>
<td style="text-align:left">WiX 文件的路徑</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="https://i.imgur.com/SbjBwmv.png" alt="img_2"  />
</p>
<h2 id="wix-productwxs">Wix Product.wxs</h2>
<p><a href="https://raw.githubusercontent.com/Wenrong274/WixExamples/master/WixInstaller/WixToolset/Product.wxs">Product.wxs</a></p>
<h3 id="桌面捷徑">桌面捷徑</h3>
<p>需要注意一些細項設定，如 Guid、執行檔名稱、路徑等。</p>
<pre tabindex="0"><code class="language-wxc" data-lang="wxc">&lt;Directory Id=&#34;DesktopFolder&#34; Name=&#34;Desktop&#34; &gt;
    &lt;Component Id=&#34;DesktopFolderShortcut&#34; Guid=&#34;{94D38478-869E-4CA8-BEA6-7905A7135DB8}&#34;&gt;
        &lt;Shortcut Id=&#34;DesktopShortcut&#34; Directory=&#34;DesktopFolder&#34; Name=&#34;Wix-Hello Unity&#34; Target=&#34;[INSTALLFOLDER]Wix-Hello Unity.exe&#34; WorkingDirectory=&#34;INSTALLFOLDER&#34; Icon=&#34;WixToolsetIcon&#34;&gt;
        &lt;/Shortcut&gt;
        &lt;RegistryValue Root=&#34;HKCU&#34; Key=&#34;Software\WenRongStudio\Wix-Hello Unity&#34; Name=&#34;installed&#34; Type=&#34;integer&#34; Value=&#34;1&#34; KeyPath=&#34;yes&#34;/&gt;
    &lt;/Component&gt;
&lt;/Directory&gt;
</code></pre><h4 id="資料夾權限">資料夾權限</h4>
<p>避免安裝在系統槽時，無法變動檔案，所以必須把資料夾權限打開。</p>
<p>需要注意一些細項設定，如 Guid 等。</p>
<pre tabindex="0"><code class="language-wxc" data-lang="wxc">&lt;Component Id=&#34;InstallationDirectory&#34; Guid=&#39;{0D92D4B6-CACE-4556-8CBD-C8C385B22D28}&#39; &gt;
    &lt;CreateFolder Directory=&#34;INSTALLFOLDER&#34;&gt;
        &lt;Permission User=&#34;SYSTEM&#34; GenericAll=&#34;yes&#34;/&gt;
        &lt;Permission User=&#34;EveryOne&#34; GenericAll=&#34;yes&#34; GenericRead=&#34;yes&#34; Read=&#34;yes&#34; ReadAttributes=&#34;yes&#34;  GenericExecute=&#34;yes&#34; TakeOwnership =&#34;yes&#34;  GenericWrite =&#34;yes&#34;    WriteAttributes=&#34;yes&#34; ReadPermission =&#34;yes&#34;   ChangePermission=&#34;yes&#34; /&gt;
        &lt;Permission User=&#34;Users&#34; Domain=&#34;[LOCAL_MACHINE_NAME]&#34; GenericAll=&#34;yes&#34; GenericRead=&#34;yes&#34; Read=&#34;yes&#34; ReadAttributes=&#34;yes&#34;  GenericExecute=&#34;yes&#34; TakeOwnership =&#34;yes&#34;  GenericWrite =&#34;yes&#34;    WriteAttributes=&#34;yes&#34; ReadPermission =&#34;yes&#34;   ChangePermission=&#34;yes&#34;/&gt;
    &lt;/CreateFolder&gt;
&lt;/Component&gt;
</code></pre><h4 id="建立-windows-menu-資料">建立 Windows Menu 資料</h4>
<p>可以 Windows Menu 啟動檔案跟卸載執行檔。</p>
<p>需要注意一些細項設定，如 Guid、執行檔名稱、路徑等。</p>
<pre tabindex="0"><code class="language-wxc" data-lang="wxc">&lt;Directory Id=&#34;ProgramMenuFolder&#34;&gt;
    &lt;Directory Id=&#34;ApplicationProgramsFolder&#34; Name=&#34;Wix-Hello Unity&#34;&gt;
        &lt;Component Id=&#34;ApplicationShortcut&#34; Guid=&#34;{9724BE7E-7132-4978-B806-4B0D1B3DE350}&#34;&gt;
            &lt;Shortcut Id=&#34;ApplicationStartMenuShortcut&#34;
                    Name=&#34;Wix-Hello Unity&#34;
                    Description=&#34;Wix-Hello Unity&#34;
                    Target=&#34;[INSTALLFOLDER]\Wix-Hello Unity.exe&#34;
                    WorkingDirectory=&#34;APPLICATIONROOTDIRECTORY&#34;
                    Icon=&#34;WixToolsetIcon&#34;/&gt;
            &lt;Shortcut Id=&#34;UninstallProduct&#34;
                    Name=&#34;Uninstall&#34;
                    Description=&#34;Uninstalls Wix-Hello Unity&#34;
                    Target=&#34;[System64Folder]msiexec.exe&#34;
                    Arguments=&#34;/x [ProductCode]&#34; /&gt;
            &lt;RemoveFolder Id=&#34;ProgramMenuSubfolder&#34; On=&#34;uninstall&#34;/&gt;
            &lt;RemoveFolder Id=&#34;ApplicationProgramsFolder&#34; On=&#34;uninstall&#34;/&gt;

            &lt;RegistryValue Root=&#34;HKCU&#34; Key=&#34;Software\WenRongStudio\Wix-Hello Unity&#34; Name=&#34;installed&#34; Type=&#34;integer&#34; Value=&#34;1&#34; KeyPath=&#34;yes&#34;/&gt;
        &lt;/Component&gt;
    &lt;/Directory&gt;
&lt;/Directory&gt;
</code></pre><h3 id="githubgithub"><a href="https://github.com/Wenrong274/WixExamples">GitHub</a></h3>
<h3 id="參考文章">參考文章</h3>
<p><a href="https://blog.walterlv.com/post/getting-started-with-wix-toolset-msi-hello-world">用 WiX 制作安装包：创建一个简单的 msi 安装包</a></p>
<p><a href="https://ithelp.ithome.com.tw/users/20139206/ironman/3901">30 天 | C# WixToolset + WPF 帥到不行的安裝包 系列</a></p>
<p><a href="https://wixtoolset.org/docs/v3/howtos/files_and_registry/create_uninstall_shortcut/">Create an Uninstall Shortcut</a></p>
<p><a href="https://wixtoolset.org/docs/v3/howtos/files_and_registry/create_start_menu_shortcut/">Create a Shortcut on the Start Menu</a></p>
<p><a href="https://stackoverflow.com/a/17513551">Removing files when uninstalling WiX</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Xcode Command PhaseScriptExecution Failed</title>
      <link>https://wenrongdev.com/posts/xcode_command_phasescriptexecution_failed/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/xcode_command_phasescriptexecution_failed/</guid>
      <description>write something</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>在 Windwos 環境使用 Unity 輸出 XCode，之後使用 Mac 測試、上傳，出現了錯誤。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Command PhaseScriptExecution failed with a nonzero exit code
</span></span></code></pre></div><p><img loading="lazy" src="https://i.imgur.com/AvL0uqn.png" alt="img"  />
</p>
<h2 id="解決方式">解決方式</h2>
<p>因為專案有使用 Cardboard，且 Unity 是使用 2022，才會出現此問題，之前使用 2021 輸出上架都沒問題。</p>
<p>我的解決方法是把專案改成在 MacOS 上輸出就能完美解決此問題。</p>
<h2 id="測試過的方法">測試過的方法</h2>
<p>有測試過的方法，可是對我這次情況沒有效果。</p>
<ul>
<li>升級或安裝 Pod。<a href="https://forum.unity.com/threads/error-on-build.561706/#post-5585278">參考</a></li>
<li>修改 build phases 開啟 For install builds only。<a href="https://stackoverflow.com/questions/73760753/xcode-14-0-command-phasescriptexecution-failed-with-a-nonzero-exit-code">參考</a></li>
<li>修改 Workspace Setting 的 Build System，在 Xcode 14 無法修改。<a href="https://blog.csdn.net/qq_40697071/article/details/99055070">參考</a></li>
</ul>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity2021 Video Player Crush</title>
      <link>https://wenrongdev.com/posts/unity2021-videoplayercrush/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity2021-videoplayercrush/</guid>
      <description>在 Android 11 以上的版本使用 VideoPlayer 呼叫 Stop 時會造成 App Crush。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>在 Android 11 以上的版本使用 VideoPlayer 呼叫 <code>Stop();</code> 時會造成 App Crush。</p>
<p>官方論壇討論此問題<a href="https://forum.unity.com/threads/android-crash-when-videoplayer-stop-is-executed.1361863/">文章</a>。</p>
<h2 id="錯誤-log">錯誤 log</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Stack trace:
</span></span><span style="display:flex;"><span>Error AndroidRuntime signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x0
</span></span><span style="display:flex;"><span>Error AndroidRuntime Cause: null pointer dereference
</span></span><span style="display:flex;"><span>Error AndroidRuntime r0 00000000 r1 00003f06 r2 71303e68 r3 00000002
</span></span><span style="display:flex;"><span>Error AndroidRuntime r4 0848fed2 r5 e5f9b138 r6 ea0e93e0 r7 00000000
</span></span><span style="display:flex;"><span>Error AndroidRuntime r8 b5c5bfa8 r9 00000000 r10 b5c5bfe8 r11 00000002
</span></span><span style="display:flex;"><span>Error AndroidRuntime ip e9e63e58 sp b5c5bf00 lr e9df8263 pc e9d823fa
</span></span><span style="display:flex;"><span>Error AndroidRuntime
</span></span><span style="display:flex;"><span>Error AndroidRuntime backtrace:
</span></span><span style="display:flex;"><span>Error AndroidRuntime #00 pc 000773fa /system/lib/libandroid_runtime.so (BuildId: cb59abe29c72e464af331ce6551ec035)
</span></span><span style="display:flex;"><span>Error AndroidRuntime #01 pc 00000136 [anon:.bss]
</span></span><span style="display:flex;"><span>Error AndroidRuntime
</span></span><span style="display:flex;"><span>Error AndroidRuntime at libandroid_runtime.0x773fa(Native Method)
</span></span><span style="display:flex;"><span>Error AndroidRuntime at [anon:.0x136(Native Method)
</span></span></code></pre></div><h2 id="解決方式">解決方式</h2>
<p>官方在論壇回覆是建議回去 2020 版，之後會修復。因為我使用的專案不方便降版。</p>
<p>我解決的方式 VideoPlayer.Pause()，然後<code>生成</code>一個新的 VideoPlayer 物件，原本舊的 VideoPlayer 物件不要關閉物件、不要刪除物件，不然都會造成 App Crush。</p>
<p>不過最終解決方式還是需要等官方處理結束，可以看這個 bug 什麼時候解決 <a href="https://issuetracker.unity3d.com/issues/android-application-crashes-when-changing-the-source-url-of-a-video-player-in-android">Issue Tracker</a>。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity ParticleBezierPath</title>
      <link>https://wenrongdev.com/posts/particlebezierpath/</link>
      <pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/particlebezierpath/</guid>
      <description>Unity 實作粒子路徑系統。並且使用 Job System 優化效能。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>此篇是優化原本的 <a href="https://wenrongdev.com/posts/unity-particlepath/">Unity ParticlePath</a></p>
<h2 id="簡介">簡介</h2>
<p>有使用 Job System 優化功能。</p>
<p>100000 顆粒子使用路徑功能時，SAMSUNG GALAXY S7 在不使用 Job System FPS 約 8-9 FPS，使用後變成 18-20 FPS，PC 版多使用了 Burst 會從 30 FPS 提升至 100 FPS。</p>
<p>可能因為測試的硬體裝置數據優化有所不同，建議還是實際測試後才決定。</p>
<h2 id="使用方式">使用方式</h2>
<p>可以先使用 demo 場景測試，必須要打開 <code>IsJob</code>，才會啟動 Job System。</p>
<p><img loading="lazy" src="https://imgur.com/lfos4S0.gif" alt="demogif"  />
</p>
<h2 id="githubgithub"><a href="https://github.com/Wenrong274/ParticleBezierPath">GitHub</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Oculus Sample</title>
      <link>https://wenrongdev.com/posts/oculussample/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/oculussample/</guid>
      <description>簡易的 Oculus 功能介紹專案</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>這是簡易的 Oculus 功能介紹專案，是我製作 VR 專案以來經常使用到的操作行為，我把這些操作行為歸類起來。</p>
<p>功能接紹有按鈕、抓取、放置、按壓、等操作行為，目前只要有這些功能就能完整製作 VR 的操作行為。</p>
<h2 id="配置">配置</h2>
<p>需要參考官方文件 <a href="https://developer.oculus.com/documentation/unity/unity-gs-overview/">Get Started with Oculus in Unity</a>，也可以觀看該<a href="https://github.com/Wenrong274/OculusSample">專案配置</a>。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Deep Link -2</title>
      <link>https://wenrongdev.com/posts/unitydeeplink_2/</link>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unitydeeplink_2/</guid>
      <description>介紹 Unity Deep Link 呼叫方式</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>deep link 可以用網址來當 link id，類似像手機點開 Youtube 網址時，假如裝置內有 Youtube App 就會自動開啟 App，並且切換至該影片內容。而 deep link 也可以用網址來當 link id 達到這樣的效果。</p>
<p>也可以用來呼叫 app 時，假如該裝置沒有安裝可以直接轉移到 app store 上面讓使用者直接下載該 app。</p>
<h2 id="android">Android</h2>
<p>需要在 <code>AndroidManifest</code> 上寫上 link id，可以根據 <a href="https://developer.android.com/training/app-links/deep-linking">Create Deep Links to App Content</a> 參考詳細的設置方式。</p>
<ul>
<li>url 呼叫方式</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;intent-filter&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;action</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.intent.action.VIEW&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;category</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.intent.category.DEFAULT&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;category</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.intent.category.BROWSABLE&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;data</span> <span style="color:#a6e22e">android:scheme=</span><span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;data</span> <span style="color:#a6e22e">android:scheme=</span><span style="color:#e6db74">&#34;https&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;data</span> <span style="color:#a6e22e">android:host=</span><span style="color:#e6db74">&#34;wenrongdev.com&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;data</span> <span style="color:#a6e22e">android:pathPrefix=</span><span style="color:#e6db74">&#34;/unitydeeplink_2&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/intent-filter&gt;</span>
</span></span></code></pre></div><p><code>host</code>：網址</p>
<p><code>pathPrefix</code>：節點</p>
<p>可以利用這種方式，app 超連結開啟或者網頁輸入 <code>https://wenrongdev.com/posts/unitydeeplink_2/</code> 時就會自動對應到 App。</p>
<ul>
<li>自訂 id</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;intent-filter&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;action</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.intent.action.VIEW&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;category</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.intent.category.DEFAULT&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;category</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.intent.category.BROWSABLE&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;data</span> <span style="color:#a6e22e">android:scheme=</span><span style="color:#e6db74">&#34;app&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;data</span> <span style="color:#a6e22e">android:host=</span><span style="color:#e6db74">&#34;wenrongdev&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/intent-filter&gt;</span>
</span></span></code></pre></div><p>可以利用這種方式，app 超連結開啟或者網頁輸入 <code>app://wenrongdev</code> 時就會自動對應到 App。</p>
<h2 id="ios">iOS</h2>
<p>Unity 設定 link id 的方式在 <a href="https://docs.unity3d.com/Manual/deep-linking-ios.html">Deep linking on iOS</a> 有介紹如何設定，而 Xcode 也能設定，不過建議是在 Unity 中設定非必要不建議額外自己在手動設置，主要是怕輸出時忘記導致功能失效。</p>
<p>Xcode 詳細設定可以參考這邊 <a href="https://medium.com/wolox/ios-deep-linking-url-scheme-vs-universal-links-50abd3802f97">IOS Deep linking: URL Scheme vs Universal Links</a></p>
<p><img loading="lazy" src="https://imgur.com/WIvC4gC.png" alt="img_1"  />
</p>
<p>這樣設定後就會與 Android 一樣的功能，在瀏覽器輸出該 link id 就會自動對應到 app。</p>
<h2 id="其他">其他</h2>
<ul>
<li><a href="https://github.com/WenRongDev/Unity-DeepLink">Github</a></li>
<li><a href="https://wenrongdev.com/posts/unitydeeplink_1/">Unity Deep Link -1</a></li>
</ul>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Deep Link -1</title>
      <link>https://wenrongdev.com/posts/unitydeeplink_1/</link>
      <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unitydeeplink_1/</guid>
      <description>介紹 Unity Deep Link 使用方式</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>DeepLink 是可以直接用網址呼叫 App 的方式之一，以前有提到可以利用 <a href="https://wenrongdev.com/posts/get-android-intent-data-for-unity/">Get Android Intent Data for Unity</a> 這邊文章提到的方式，呼叫 App，不過這只限定 Android，iOS 則還是需要用 Deeplink 的方式呼叫。主要是當時 Unity 版本並不支援 DeepLink，所以只能自己寫原生的，才會有之前的<a href="https://wenrongdev.com/posts/get-android-intent-data-for-unity/">這篇</a>文章，更重要的是，使用之前的呼叫方式是需要某些權限，但目前 Google 也把這些權限關閉，無法正常上架需要自己寫信去解釋才會願意讓你正常上架。所以建議是棄用這種方法改用 Deeplink。</p>
<h2 id="詳細資料">詳細資料</h2>
<ul>
<li>
<p><a href="https://docs.unity3d.com/Manual/deep-linking.html">Unity Deep Link</a></p>
</li>
<li>
<p><a href="https://developer.android.com/training/app-links/deep-linking">Android Deep Link</a></p>
</li>
<li>
<p><a href="https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content">iOS Deep Link</a></p>
</li>
</ul>
<p>建議是一定要把 <a href="https://docs.unity3d.com/Manual/deep-linking.html">Unity Deep Link</a> 看完，才會知道怎麼設定，其餘兩邊則是原生地設定方式，可以參考。</p>
<h2 id="使用方式">使用方式</h2>
<p><a href="https://docs.unity3d.com/Manual/deep-linking.html">Unity Deep link Doc</a></p>
<p>官方也有文件解釋 Deep link 的基礎設定。</p>
<h2 id="script-start">Script Start</h2>
<p>需要再被喚醒 app 的瞬間也就是 Awake 時，先讀取 <code>Application.absoluteURL</code> 才能讀取道 deep link 的資料。<code>Application.deepLinkActivated</code> 部分則是 app 的 deep link feedback。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Awake()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Application.deepLinkActivated += OnDeepLinkActivated;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">string</span>.IsNullOrEmpty(Application.absoluteURL))
</span></span><span style="display:flex;"><span>            OnDeepLinkActivated(Application.absoluteURL);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h2 id="script-url-arg">Script Url Arg</h2>
<p>拆解 Deep link 夾帶的參數，格式大概與 web 的 url get 類似，可以用這種方式去解析，夾帶的參數。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> OnDeepLinkActivated(<span style="color:#66d9ef">string</span> url)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span>[] urlArg = url.Split(<span style="color:#e6db74">&#39;?&#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span>[] args = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">string</span>[<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (urlArg.Length &gt; <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span>[] charSeparators = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span>[] { <span style="color:#e6db74">&#39;&amp;&#39;</span> };
</span></span><span style="display:flex;"><span>            args = urlArg[<span style="color:#ae81ff">1</span>].Split(charSeparators, StringSplitOptions.RemoveEmptyEntries);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; args.Length; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Debug.Log(args[i]);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h2 id="其他">其他</h2>
<ul>
<li><a href="https://github.com/WenRongDev/Unity-DeepLink">Github</a></li>
<li><a href="https://wenrongdev.com/posts/unitydeeplink_2/">Unity Deep Link -2</a></li>
</ul>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Text Breaking Space</title>
      <link>https://wenrongdev.com/posts/unitytextbreakingspace/</link>
      <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unitytextbreakingspace/</guid>
      <description>Unity Text 中英混雜字串，導致 Space 字串跳行問題</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>Unity Text 中英混雜導致英文字跳行問題，主要是 Space 字串的問題，可以用 <code>\u00A0</code> 替代 Space。</p>
<h2 id="code">Code</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C#" data-lang="C#"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">string</span> no_breaking_space = <span style="color:#e6db74">&#34;\u00A0&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> ReplaceSpace(<span style="color:#66d9ef">string</span> context)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> context.Replace(<span style="color:#e6db74">&#34; &#34;</span>, no_breaking_space);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>可以這樣替代全部的 Space。</p>
<h2 id="範例">範例</h2>
<ul>
<li>使用前</li>
</ul>
<p><img loading="lazy" src="https://imgur.com/4dSyVJL.jpg" alt="img_1"  />
</p>
<ul>
<li>使用後</li>
</ul>
<p><img loading="lazy" src="https://imgur.com/GhMA0mV.jpg" alt="img_2"  />
</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Oculus Auto Set Build Setting &amp;&amp; Build</title>
      <link>https://wenrongdev.com/posts/oculusautosetbuildsettingandbuild/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/oculusautosetbuildsettingandbuild/</guid>
      <description>自動設定 Oculus XR 等細項設定，方便用於多平台多操作方式功能。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>之前因為遇到多平台功能，要輸出時各個平台 Player Setting 細項設定皆為不同，會因為某些沒有設定導致輸出時出包，所以才寫了一個自動輸出個平台功能。</p>
<h2 id="xr-setting">XR Setting</h2>
<p>可以利用這段來新增或移除 XR 裡面的 Oculus 勾選。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> SetOculusXRLoader(BuildTargetGroup buildTarget, <span style="color:#66d9ef">bool</span> active)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    XRGeneralSettingsPerBuildTarget buildTargetSettings = <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>    EditorBuildSettings.TryGetConfigObject(XRGeneralSettings.k_SettingsKey, <span style="color:#66d9ef">out</span> buildTargetSettings);
</span></span><span style="display:flex;"><span>    XRGeneralSettings settings = buildTargetSettings.SettingsForBuildTarget(buildTarget);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (active)
</span></span><span style="display:flex;"><span>        XRPackageMetadataStore.AssignLoader(settings.Manager, <span style="color:#e6db74">&#34;Unity.XR.Oculus.OculusLoader&#34;</span>, buildTarget);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        XRPackageMetadataStore.RemoveLoader(settings.Manager, <span style="color:#e6db74">&#34;Unity.XR.Oculus.OculusLoader&#34;</span>, buildTarget);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><img loading="lazy" src="https://i.imgur.com/l0ovOpl.png" alt="img_1"  />
</p>
<h2 id="build">Build</h2>
<p>利用這段自動輸出，options 可以設定 <code>BuildOptions.None</code>、<code>BuildOptions.AutoRunPlayer</code>，一般的 Build 和 Build and Run。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> BuildRelease(<span style="color:#66d9ef">string</span> Path, BuildTarget Target, BuildOptions options)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Console.Clear();
</span></span><span style="display:flex;"><span>    BuildPlayerOptions playerOptions = GetBuildPlayer(Path, Target, options);
</span></span><span style="display:flex;"><span>    BuildReport Report = BuildPipeline.BuildPlayer(playerOptions);
</span></span><span style="display:flex;"><span>    EditorUtility.RevealInFinder(Path);
</span></span><span style="display:flex;"><span>    Debug.Log(<span style="color:#66d9ef">string</span>.Format(<span style="color:#e6db74">&#34;{0} Build completed with a result of &#39;{1}&#39; &#34;</span>, Application.platform, Report.summary.result.ToString()));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> BuildPlayerOptions GetBuildPlayer(<span style="color:#66d9ef">string</span> path, BuildTarget Target, BuildOptions options)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> BuildPlayerOptions()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        scenes = EnabledScenePaths,
</span></span><span style="display:flex;"><span>        locationPathName = path,
</span></span><span style="display:flex;"><span>        target = Target,
</span></span><span style="display:flex;"><span>        options = options
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="完整-script">完整 Script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C#" data-lang="C#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SampleBuildRelease</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> AppName =&gt; PlayerSettings.productName;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> Version =&gt; Application.version.Replace(<span style="color:#e6db74">&#34;.&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> BuildFolder
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">get</span> { <span style="color:#66d9ef">return</span> Directory.GetParent(Application.dataPath).FullName.Replace(<span style="color:#e6db74">&#39;\\&#39;</span>, <span style="color:#e6db74">&#39;/&#39;</span>) + <span style="color:#e6db74">&#34;/Build&#34;</span>; }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span>[] EnabledScenePaths =&gt; EditorBuildSettings.scenes
</span></span><span style="display:flex;"><span>        .Where((scene) =&gt; scene.enabled)
</span></span><span style="display:flex;"><span>        .Select((scene) =&gt; scene.path)
</span></span><span style="display:flex;"><span>        .ToArray();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [MenuItem(&#34;Builds/Build/Oculus&#34;)]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Build_Oculus()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> path = Path.Combine(BuildFolder, <span style="color:#e6db74">&#34;Oculus&#34;</span>, <span style="color:#e6db74">$&#34;Oculus_{AppName}_Ver{Version}.apk&#34;</span>);
</span></span><span style="display:flex;"><span>        BuildReleaseOculus(path, BuildOptions.None, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [MenuItem(&#34;Builds/Build And Run/Oculus&#34;)]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> BuildAndRun_Oculus()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> path = Path.Combine(BuildFolder, <span style="color:#e6db74">&#34;Oculus&#34;</span>, <span style="color:#e6db74">$&#34;Oculus_{AppName}_Ver{Version}.apk&#34;</span>);
</span></span><span style="display:flex;"><span>        BuildReleaseOculus(path, BuildOptions.AutoRunPlayer, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> BuildReleaseOculus(<span style="color:#66d9ef">string</span> path, BuildOptions buildOptions, <span style="color:#66d9ef">bool</span> AddXR)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        SetOculusXRLoader(BuildTargetGroup.Android, AddXR);
</span></span><span style="display:flex;"><span>        BuildRelease(path, BuildTarget.Android, buildOptions);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [MenuItem(&#34;Builds/Build/Windows&#34;)]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Build_Windows()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        BuildReleaseWindows(BuildOptions.None);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [MenuItem(&#34;Builds/Build And Run/Windows&#34;)]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> BuildAndRun_Windows()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        BuildReleaseWindows(BuildOptions.AutoRunPlayer);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> BuildReleaseWindows(BuildOptions buildOptions)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> folder = Path.Combine(BuildFolder, <span style="color:#e6db74">$&#34;{BuildTarget.StandaloneWindows}&#34;</span>, <span style="color:#e6db74">$&#34;Windows_{AppName}_Ver{Version}&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> path = Path.Combine(folder, <span style="color:#e6db74">$&#34;{AppName}.exe&#34;</span>);
</span></span><span style="display:flex;"><span>        SetOculusXRLoader(BuildTargetGroup.Standalone, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>        BuildRelease(path, BuildTarget.StandaloneWindows, buildOptions);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> SetOculusXRLoader(BuildTargetGroup buildTarget, <span style="color:#66d9ef">bool</span> active)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        XRGeneralSettingsPerBuildTarget buildTargetSettings = <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>        EditorBuildSettings.TryGetConfigObject(XRGeneralSettings.k_SettingsKey, <span style="color:#66d9ef">out</span> buildTargetSettings);
</span></span><span style="display:flex;"><span>        XRGeneralSettings settings = buildTargetSettings.SettingsForBuildTarget(buildTarget);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (active)
</span></span><span style="display:flex;"><span>            XRPackageMetadataStore.AssignLoader(settings.Manager, <span style="color:#e6db74">&#34;Unity.XR.Oculus.OculusLoader&#34;</span>, buildTarget);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>            XRPackageMetadataStore.RemoveLoader(settings.Manager, <span style="color:#e6db74">&#34;Unity.XR.Oculus.OculusLoader&#34;</span>, buildTarget);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> BuildRelease(<span style="color:#66d9ef">string</span> Path, BuildTarget Target, BuildOptions options)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Console.Clear();
</span></span><span style="display:flex;"><span>        BuildPlayerOptions playerOptions = GetBuildPlayer(Path, Target, options);
</span></span><span style="display:flex;"><span>        BuildReport Report = BuildPipeline.BuildPlayer(playerOptions);
</span></span><span style="display:flex;"><span>        EditorUtility.RevealInFinder(Path);
</span></span><span style="display:flex;"><span>        Debug.Log(<span style="color:#66d9ef">string</span>.Format(<span style="color:#e6db74">&#34;{0} Build completed with a result of &#39;{1}&#39; &#34;</span>, Application.platform, Report.summary.result.ToString()));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> BuildPlayerOptions GetBuildPlayer(<span style="color:#66d9ef">string</span> path, BuildTarget Target, BuildOptions options)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> BuildPlayerOptions()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            scenes = EnabledScenePaths,
</span></span><span style="display:flex;"><span>            locationPathName = path,
</span></span><span style="display:flex;"><span>            target = Target,
</span></span><span style="display:flex;"><span>            options = options
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Project Structure</title>
      <link>https://wenrongdev.com/posts/unit-unity-projectstructure/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unit-unity-projectstructure/</guid>
      <description>自動建立簡易專案資料夾結構</description>
      <content:encoded><![CDATA[<h2 id="unity-project-structure">Unity Project Structure</h2>
<p>主要是建立一個自動建立簡易專案資料夾結構。</p>
<p>此參考 <a href="https://github.com/dkoprowski/UnityProjectTreeGenerator">UnityProjectTreeGenerator</a> 方法建立資料夾，</p>
<h3 id="使用方式">使用方式</h3>
<p><code>Tools &gt; Generate Project Structure</code></p>
<p>必須要設定 Root Name 才能點擊 <code>Create Structure</code></p>
<p><img loading="lazy" src="https://imgur.com/iBAEGNO.png" alt="img_1"  />
</p>
<h3 id="資料夾結構">資料夾結構</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>|- Assets
</span></span><span style="display:flex;"><span>    |- Project Name /// 自己設定
</span></span><span style="display:flex;"><span>        |- 00_Art
</span></span><span style="display:flex;"><span>        |   |- 00_Profabs
</span></span><span style="display:flex;"><span>        |   |   |- Models
</span></span><span style="display:flex;"><span>        |   |   |- UI
</span></span><span style="display:flex;"><span>        |   |- 01_Shaders
</span></span><span style="display:flex;"><span>        |   |   |- UI_Shaders
</span></span><span style="display:flex;"><span>        |   |- 02_Timeline
</span></span><span style="display:flex;"><span>        |   |- 03_Models
</span></span><span style="display:flex;"><span>        |   |   |- Example_Model
</span></span><span style="display:flex;"><span>        |   |   |   |- 3D
</span></span><span style="display:flex;"><span>        |   |   |   |- Animation
</span></span><span style="display:flex;"><span>        |   |   |   |- Textures
</span></span><span style="display:flex;"><span>        |   |   |- Example_Effect
</span></span><span style="display:flex;"><span>        |   |       |- Textures
</span></span><span style="display:flex;"><span>        |   |- 04_Scenes
</span></span><span style="display:flex;"><span>        |   |- 05_UI
</span></span><span style="display:flex;"><span>        |   |   |- Textures
</span></span><span style="display:flex;"><span>        |   |   |- Effect
</span></span><span style="display:flex;"><span>        |   |       |- Textures
</span></span><span style="display:flex;"><span>        |   |       |- Animation
</span></span><span style="display:flex;"><span>        |   |       |- Material
</span></span><span style="display:flex;"><span>        |   |- 07_Audio
</span></span><span style="display:flex;"><span>        |   |- 08_Video
</span></span><span style="display:flex;"><span>        |- 01_Program
</span></span><span style="display:flex;"><span>           |- 00_Scenes
</span></span><span style="display:flex;"><span>           |- 01_Scripts
</span></span><span style="display:flex;"><span>           |- 02_Tests
</span></span><span style="display:flex;"><span>           |- 03_Prefabs
</span></span><span style="display:flex;"><span>           |- 05_UI
</span></span></code></pre></div><h2 id="githubgithub"><a href="https://github.com/Wenrong274/Unity-ProjectStructure">Github</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Open Shader For VSCode</title>
      <link>https://wenrongdev.com/posts/openshaderforvscode/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/openshaderforvscode/</guid>
      <description>自動對應 Shader 檔案使用 VSCode 開啟</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>針對 Unity Shader 檔案打開時，使用 VSCode 開啟而不是 Visual Studio，假如預設是 VSCode 則無需使用這功能。</p>
<p>會寫這功能是平常寫 C# 都是習慣使用 Visual Studio，而 Visual Studio 好像沒有針對 Unity Shaderlab 的關鍵字，而 VSCode 則有 <a href="https://marketplace.visualstudio.com/items?itemName=amlovey.shaderlabvscodefree">ShaderlabVSCode(Free)</a>，也因此這樣選擇使用 VSCode。</p>
<p>因為平常開發時都是使用 Visual Studio，想開啟 Shader 時可以直接使用 VSCode 編輯，因此才參考 <a href="https://blog.csdn.net/weixin_44293055/article/details/120340635">Sublime Text &amp; Unity Shader</a>，把 Sublime Text 改成使用 VSCode。</p>
<h2 id="環境變數">環境變數</h2>
<p>需要注意<code>環境變數</code>裡的使用者變數的 <code>Path</code> 需要有 VSCode 的路徑</p>
<p><img loading="lazy" src="https://imgur.com/MZN9Wgs.jpg" alt="env_1"  />
</p>
<p>也可以使用 CMD 測試有無環境變數</p>
<p><img loading="lazy" src="https://imgur.com/ME4qXZs.jpg" alt="env_2"  />
</p>
<h2 id="vscode-cli-args">VSCode CLI Args</h2>
<p>根據 Unity 開啟 VSCode Args，可以使用 <code>Process</code> 填寫對應路徑就可以了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&#34;$(ProjectPath)&#34; -g &#34;$(File)&#34;:$(Line):$(Column)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>startInfo.Arguments = <span style="color:#e6db74">$&#34;{projectPath} -g {fileName}&#34;</span>;
</span></span></code></pre></div><h3 id="script">Script</h3>
<p>詳細的方法可以參考 <a href="https://blog.csdn.net/weixin_44293055/article/details/120340635">Sublime Text &amp; Unity Shader</a>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OpenShaderForVSCodeEditor</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [UnityEditor.Callbacks.OnOpenAsset(0)]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> CallbackShader(<span style="color:#66d9ef">int</span> instanceID, <span style="color:#66d9ef">int</span> line)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> projectPath = Directory.GetParent(Application.dataPath).ToString();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> strFilePath = AssetDatabase.GetAssetPath(EditorUtility.InstanceIDToObject(instanceID));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> fileName = projectPath + <span style="color:#e6db74">&#34;/&#34;</span> + strFilePath;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (fileName.EndsWith(<span style="color:#e6db74">&#34;.shader&#34;</span>))
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> envUser = Environment.GetEnvironmentVariables(EnvironmentVariableTarget.User);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> envPaths = envUser[<span style="color:#e6db74">&#34;Path&#34;</span>].ToString().Split(<span style="color:#e6db74">&#34;;&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">string</span> vscodePath = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; envPaths.Length; i++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> path = Path.Combine(envPaths[i], <span style="color:#e6db74">&#34;code&#34;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (File.Exists(path))
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    vscodePath = path;
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">string</span>.IsNullOrEmpty(vscodePath))
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                Process process = <span style="color:#66d9ef">new</span> Process();
</span></span><span style="display:flex;"><span>                ProcessStartInfo startInfo = <span style="color:#66d9ef">new</span> ProcessStartInfo();
</span></span><span style="display:flex;"><span>                startInfo.WindowStyle = ProcessWindowStyle.Hidden;
</span></span><span style="display:flex;"><span>                startInfo.FileName = vscodePath;
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">///vscode args &#34;$(ProjectPath)&#34; -g &#34;$(File)&#34;:$(Line):$(Column)</span>
</span></span><span style="display:flex;"><span>                startInfo.Arguments = <span style="color:#e6db74">$&#34;{projectPath} -g {fileName}&#34;</span>;
</span></span><span style="display:flex;"><span>                process.StartInfo = startInfo;
</span></span><span style="display:flex;"><span>                process.Start();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                UnityEngine.Debug.Log(<span style="color:#e6db74">&#34;Not Found Enviroment Variable &#39;VSCode_Path&#39;.&#34;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="githubgithub"><a href="https://github.com/Wenrong274/OpenShaderForVSCode">GitHub</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Addressable Load Assets</title>
      <link>https://wenrongdev.com/posts/unity-addressable_load_assets/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-addressable_load_assets/</guid>
      <description>介紹 Unity Addressable 讀取、生成、釋放方式</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>介紹我使用 Addressable 的讀取、生成、釋放方式。</p>
<p>詳細設定還是可以先觀看<a href="https://docs.unity3d.com/Packages/com.unity.addressables@1.3/manual/MemoryManagement.html">官方文件</a>。</p>
<h2 id="event-viewer">Event Viewer</h2>
<p><img loading="lazy" src="https://imgur.com/ohiBIeL.jpg" alt="img-1"  />
</p>
<p>可以利用 Event Viewer 在 Editor Runtime 時，隨時監控記憶體使用情況。就可以很明顯的發現，那些東西是忘記釋放掉的，或者不需要釋放的。</p>
<h2 id="load-asset">Load Asset</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>IEnumerator InstantiateAsset(<span style="color:#66d9ef">string</span> asset)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    AsyncOperationHandle&lt;GameObject&gt; <span style="color:#66d9ef">async</span> = asset.LoadAssetAsync&lt;GameObject&gt;();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">async</span>;
</span></span><span style="display:flex;"><span>    GameObject go = Instantiate(<span style="color:#66d9ef">async</span>.Result);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IEnumerator InstantiateAssets(<span style="color:#66d9ef">string</span> label)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    AsyncOperationHandle&lt;IList&lt;GameObject&gt;&gt; <span style="color:#66d9ef">async</span> = Addressables.LoadAssetsAsync&lt;GameObject&gt;(label, <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">async</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; <span style="color:#66d9ef">async</span>.Result.Count; i++)
</span></span><span style="display:flex;"><span>        GameObject go = Instantiate(<span style="color:#66d9ef">async</span>.Result[i]);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IEnumerator InstantiateAsset(AssetReference asset)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    AsyncOperationHandle&lt;GameObject&gt; <span style="color:#66d9ef">async</span> = asset.LoadAssetAsync&lt;GameObject&gt;();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">async</span>;
</span></span><span style="display:flex;"><span>    GameObject go = Instantiate(<span style="color:#66d9ef">async</span>.Result);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>可以利用這三種方式讀取 Asset，並且把物件生成出來，當然我還是最推薦使用 AssetReference，除非有什麼特殊需求要使用字串，不然我不會換成其他方式。</p>
<h2 id="release-asset">Release Asset</h2>
<p>釋放掉 Asset 也記得要把物件<code>刪除</code>，不然場上會遺留破圖的物件。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> ReleaseAsset(AsyncOperationHandle&lt;T&gt; <span style="color:#66d9ef">async</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Addressables.Release(<span style="color:#66d9ef">async</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> ReleaseAsset(T asset)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Addressables.Release(asset);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> ReleaseAsset(AssetReference asset)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    asset.ReleaseAsset();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>可以利用生成的物件或者 Load asset 的 Async 釋放，假如是使用 AssetReference Load Asset，也可以使用這個方式釋放。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Addressable Download Assets</title>
      <link>https://wenrongdev.com/posts/unity-addressable_download_assets/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-addressable_download_assets/</guid>
      <description>介紹 Unity Addressable 多個下載方式</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>在前一篇 <a href="../unity-addressable">Unity Addressable</a> 介紹了簡易使用的方式，此篇是介紹下載 Asset 方法。</p>
<p>目前我個人使用過的方式有 Name、Label、AssetReference、Array AssetReference 的方式。</p>
<h2 id="addressablesloadassetasync">Addressables.LoadAssetAsync</h2>
<p>官方範例提供的下載方式 <a href="https://docs.unity3d.com/Packages/com.unity.addressables@1.15/manual/LoadingAddressableAssets.html">Addressables.LoadAsset(s)Async</a>，雖然這個是要把 Asset 讀取出來，其實他也有下載功能</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>    Addressables.LoadAssetAsync&lt;GameObject&gt;(asset);
</span></span></code></pre></div><p>我是很少使用這種方式下載或更新 Asset，主因是我個人認為 Addressables.LoadAssetAsync 是讀取物件而不是更新物件的功能，所以我在需要更新時不會使用它。</p>
<h2 id="update-addressable-name-addressable-label">Update Addressable Name/ Addressable Label</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>IEnumerator UpdateAsset(<span style="color:#66d9ef">string</span> asset)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> downloadAsync = Addressables.DownloadDependenciesAsync(asset, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> downloadAsync;
</span></span><span style="display:flex;"><span>    Addressables.Release(downloadAsync);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>這個是下載 <code>Addressable Name</code> 或 <code>Label</code>的方法，可以利用 Label 下載多個不同 Group 的 Asset。</p>
<p><img loading="lazy" src="https://imgur.com/aPKLTt3.jpg" alt="img-1"  />
</p>
<p><code>Addressable Name</code>、<code>Label</code> 是無法利用 Hotfix 的方式產生，所以是要先創好需要的。若假如需要新的 Addressable Name、Label 是必須要<code>重新輸出</code> App 才會更新。</p>
<p><img loading="lazy" src="https://imgur.com/2j7oGN0.jpg" alt="img-2"  />
</p>
<h2 id="update-asset-reference">Update Asset Reference</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>IEnumerator UpdateAsset(AssetReference asset)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> downloadAsync = Addressables.DownloadDependenciesAsync(asset, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> downloadAsync;
</span></span><span style="display:flex;"><span>    Addressables.Release(downloadAsync);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><a href="https://docs.unity3d.com/Packages/com.unity.addressables@0.4/api/UnityEngine.AddressableAssets.AssetReference.html">AssetReference</a> 的用法是我最推薦的下載方式，可以很明顯的知道更新物件，不會因為打錯文字導致更新失敗，而且也可以利用這個方式組合物件，讓更新的內容比較簡單方式處理。</p>
<p>例如用一個物件或場景夾帶了多個不同的需要更新的物件，缺點就是這包 pack 輸出會過大，可能需要把每個物件獨立分成多個 AssetReference，利用系統特性夾帶物件變小。不過要是不喜歡這種方式可以看 <a href="#update-multiple-asset-references">Update Multiple Asset References</a>。</p>
<p>不過 AssetReference 最方便還是使用它來生成、釋放、等等，才是最好用的方式。</p>
<h2 id="update-multiple-asset-references">Update Multiple Asset References</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>IEnumerator DonwloadMultipleAssets(AssetReference[] assets)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> assetKeys = assets.Cast&lt;AssetReference&gt;();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> downloadAsync = Addressables.DownloadDependenciesAsync(assetKeys, Addressables.MergeMode.Union);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> downloadAsync;
</span></span><span style="display:flex;"><span>    Addressables.Release(downloadAsync);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>多個 AssetReference 更新的方式，然後可以一起更新。可以完成一個簡單的多個物件更新，不用利用 Label、整合包、等方式更新。</p>
<h2 id="取得下載容量大小方法">取得下載容量大小方法</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>IEnumerator CheckSizeAsync(<span style="color:#66d9ef">string</span> asset)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#66d9ef">async</span> = Addressables.GetDownloadSizeAsync(asset);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">async</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">async</span>.Status == AsyncOperationStatus.Succeeded)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">float</span> size = Mathf.Round((<span style="color:#66d9ef">float</span>)<span style="color:#66d9ef">async</span>.Result / <span style="color:#ae81ff">1024</span> / <span style="color:#ae81ff">1024</span> * <span style="color:#ae81ff">1000</span>) / <span style="color:#ae81ff">1000</span>;
</span></span><span style="display:flex;"><span>        Debug.Log(<span style="color:#e6db74">$&#34;Total {size} MB&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    Addressables.Release(<span style="color:#66d9ef">async</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="更新進度條寫法">更新進度條寫法</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>IEnumerator UpdateAsset(AssetReference asset)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> downloadAsync = Addressables.DownloadDependenciesAsync(asset, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (!downloadAsync.IsDone)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">float</span> percent = downloadAsync.PercentComplete;
</span></span><span style="display:flex;"><span>        Debug.Log(<span style="color:#e6db74">$&#34;{asset}: {downloadAsync.PercentComplete * 100} %&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> WaitForEndOfFrame();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    Addressables.Release(downloadAsync);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
]]></content:encoded>
    </item>
    <item>
      <title>Android Build Failed Build tools 3X.0.0 Bug</title>
      <link>https://wenrongdev.com/posts/unity-android_failed_buildtoolsbug/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-android_failed_buildtoolsbug/</guid>
      <description>Fix Installed Build Tools revision 3X.0.0 is corrupted.</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>輸出 Apk 遇到的錯誤</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Fix Installed Build Tools revision 3X.0.0 is corrupted.
</span></span></code></pre></div><p><img loading="lazy" src="https://imgur.com/CziTHbS.jpg" alt="img_1"  />
</p>
<h2 id="修改方式">修改方式</h2>
<h3 id="修改-d8bat">修改 d8.bat</h3>
<p>檔案路徑 <code>&lt;Android SDK root&gt;\build-tools\3X.0.0</code></p>
<p><img loading="lazy" src="https://imgur.com/YwqG9ek.jpg" alt="simg_1"  />
</p>
<p>將 <code>d8.bat</code> 改為 <code>dx.bat</code>。</p>
<h3 id="修改-d8jar">修改 d8.jar</h3>
<p>檔案路徑 <code>&lt;Android SDK root&gt;\build-tools\3X.0.0\lib</code></p>
<p><img loading="lazy" src="https://imgur.com/sLwOhQx.jpg" alt="simg_2"  />
</p>
<p>將 <code>d8.jar</code> 改為 <code>dx.jar</code>。</p>
<p>就完成修改。</p>
<h2 id="參考連結">參考連結</h2>
<p><a href="https://stackoverflow.com/a/68430992">Android Studio error &ldquo;Installed Build Tools revision 31.0.0 is corrupted&rdquo;</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Blog 心得（3）</title>
      <link>https://wenrongdev.com/posts/reflection-blog-3/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/reflection-blog-3/</guid>
      <description>使用 Hugo 心得，並且使用 PaperMod 當主題時遇到的問題。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>此篇在講如何使用 Hugo 在 Github 上自架 Blog。</p>
<h3 id="安裝-hugo">安裝 Hugo</h3>
<p>關於安裝的部分可以參考這些文章</p>
<ul>
<li><a href="https://gohugo.io/getting-started/quick-start/">Quick Start</a></li>
<li><a href="https://medium.com/@chswei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40">GitHub 部署 Hugo 靜態網站</a></li>
<li><a href="https://jimmylin212.github.io/post/0001_create_hugo_and_deploy_on-github_page/">使用 Hugo 建立靜態網站，並部署在 Github Page</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20106430/ironman/3613">Hugo 貼身打造個人部落格 系列</a></li>
</ul>
<p>與文章不同的地方主題我是選擇 <a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod</a>，由於需要設定 <strong>config.yml</strong>，建議先參考 <a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Installation">PaperMod-Installation</a>。</p>
<p>想要完整的設定或理解 PaperMod，最好是完整的看完 <a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod</a> 的 repo，有不知道的問題可以在 <a href="https://github.com/adityatelange/hugo-PaperMod/issues">Issues</a> 或者 <a href="https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs">FAQs</a> 搜尋看看，會比 google 搜尋來得快。</p>
<h3 id="papermod">PaperMod</h3>
<p>由於 PaperMod 推薦使用 <code>config.yml</code>，因此推薦把原本的 <code>config.toml</code> 刪除。並且去複製官方提供的 <a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Installation#sample-configyml">config.yml</a>。</p>
<h3 id="configyml">config.yml</h3>
<h4 id="search-post">Search Post</h4>
<p>先在 config menu main 新增一個 Search 頁面</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>menu:
</span></span><span style="display:flex;"><span>    main:
</span></span><span style="display:flex;"><span>        - identifier: archives
</span></span><span style="display:flex;"><span>          name: Archives
</span></span><span style="display:flex;"><span>          url: /archives/
</span></span><span style="display:flex;"><span>          weight: 5
</span></span><span style="display:flex;"><span>        - identifier: tags
</span></span><span style="display:flex;"><span>          name: Tags
</span></span><span style="display:flex;"><span>          url: /tags/
</span></span><span style="display:flex;"><span>          weight: 10
</span></span><span style="display:flex;"><span>        - identifier: search
</span></span><span style="display:flex;"><span>          name: Search
</span></span><span style="display:flex;"><span>          url: /search/
</span></span><span style="display:flex;"><span>          weight: 20
</span></span></code></pre></div><p>且在最底下此內容。（<a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Features#search-page">參考文件</a>）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>outputs:
</span></span><span style="display:flex;"><span>    home:
</span></span><span style="display:flex;"><span>        - HTML
</span></span><span style="display:flex;"><span>        - RSS
</span></span><span style="display:flex;"><span>        - JSON # is necessary
</span></span></code></pre></div><p>最後在專案的 <code>content</code> 底下新增 <code>search.md</code>，即可完成功能。（<a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Features#search-page">參考文件</a>）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: &#34;Search&#34; # in any language you want
</span></span><span style="display:flex;"><span>layout: &#34;search&#34; # is necessary
</span></span><span style="display:flex;"><span># url: &#34;/archive&#34;
</span></span><span style="display:flex;"><span># description: &#34;Description for Search&#34;
</span></span><span style="display:flex;"><span>summary: &#34;search&#34;
</span></span><span style="display:flex;"><span>placeholder: &#34;placeholder text in search input box&#34;
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><h4 id="comments">Comments</h4>
<p>此功能是參考 <a href="https://ithelp.ithome.com.tw/articles/10248312">Day 20. Hugo Comments System</a> 文章製作出來的。</p>
<h2 id="github-action">Github Action</h2>
<p>有使用 Custom domain 的話，且 workflows 沒有設定 domain 的話，會造成每次更新文章時，都會清掉 Custom domain，變回原本的 github.io。</p>
<h3 id="github-pages-workflowyml">GitHub Pages workflow.yml</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">GitHub Pages</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">main</span> <span style="color:#75715e"># Set a branch to deploy</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">pull_request</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-20.04</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">concurrency</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">group</span>: <span style="color:#ae81ff">${{ github.workflow }}-${{ github.ref }}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span> <span style="color:#75715e"># Fetch Hugo themes (true OR recursive)</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span> <span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#34;0.91.2&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># extended: true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">hugo --minify</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-gh-pages@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">if</span>: <span style="color:#ae81ff">${{ github.ref == &#39;refs/heads/main&#39; }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">github_token</span>: <span style="color:#ae81ff">${{ secrets.HUGO_DEPLOY_TOKEN  }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">PUBLISH_BRANCH</span>: <span style="color:#ae81ff">gh-pages</span> <span style="color:#75715e"># 推送到 gh-pages 分支</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">commit_message</span>: <span style="color:#ae81ff">${{ github.event.head_commit.message }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">publish_dir</span>: <span style="color:#ae81ff">./public</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">cname</span>: <span style="color:#ae81ff">wenrongdev.com</span>
</span></span></code></pre></div><p>只需要新增或替換掉 <code>cname</code> 後面為 domain 即可。</p>
<h2 id="結論">結論</h2>
<p>Hugo 或 PaperMod 我都處於摸索階段。</p>
<p>這次架起來的感覺各方面都不錯，不管是讀取 Blog 速度、支援 Markdown、架設 Github 上且保留原始檔，到目前為止沒有明顯的缺點。</p>
<p>目前最大問題就是 <code>SEO</code>，這是我完全沒有接觸過的。問題在於 Google 搜尋不到我的 Blog，所以這是之後要研究的部分。</p>
<hr>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content:encoded>
    </item>
    <item>
      <title>Blog 心得（2）</title>
      <link>https://wenrongdev.com/posts/reflection-blog-2/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/reflection-blog-2/</guid>
      <description>Medium、CoderBridge、Hugo 之間的抉擇，最後選擇了 Hugo 自架。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>由於 <a href="https://www.siteground.com/">SiteGround</a> 費用問題，因此我需要把文章轉移至別的地方。不過也知道自己需要哪些功能。</p>
<ol>
<li>免費 Server</li>
<li>網頁速度快</li>
<li>支援程式碼片段</li>
<li>自訂網域</li>
</ol>
<p>這些是我目前需要的功能，不需要排版、SEO、等功能，最好是直接把 Markdown 語法貼上就能變成文章，剩下就都可以接受了。</p>
<h2 id="medium">Medium</h2>
<p>先說結論 Medium 不適合需要貼上 Code 的技術類文章。</p>
<ol>
<li>
<p>貼程式碼片段太麻煩。</p>
</li>
<li>
<p>使用 Markdown 語法撰寫文章，因為格式不同需要重新排版。</p>
</li>
</ol>
<p>以上這兩點是使用後遇到的<strong>難題</strong>，導致我不得不再尋找新的平台。也是這時候才知道自己的 Blog 需要什麼樣的功能。最後在 <a href="https://hulitw.medium.com/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd">寫技術部落格不需要那麼大費周章</a> 發現了 <a href="https://zh-tw.coderbridge.com/">CoderBridge</a>，並且申請了 Blog。</p>
<h2 id="coderbridge">CoderBridge</h2>
<p>完整提供 <a href="#%E5%89%8D%E8%A8%80">前言</a> 提到所有功能，不過我最後還是選擇使用 Hugo 自架 Blog。</p>
<p>主因是文章沒有<strong>備份檔</strong>。</p>
<p>因為我自己的壞習慣，所以才都沒有留住這些檔案。也因為從 Wordpress、Medium、CoderBridge 換了三個 Blog，覺得搬遷好麻煩，都沒有完整的文章檔案，每次都需要重新排版，才會想架一個免費而且可以保留文章檔案的 Blog。</p>
<p>最後自己是選擇了使用 Hugo 框架架在 Github page 上。</p>
<h2 id="結論">結論</h2>
<p>Wordpress、Medium、CoderBridge 我覺得各有優缺點，假如自己從一開始就決定要找免費的，我會選擇使用 CoderBridge，不過也因為搬來搬去才知道自己需要哪些功能，最後使用 Hugo 也只是因為我自己覺得很潮而已。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Blog 心得（1）</title>
      <link>https://wenrongdev.com/posts/reflection-blog-1/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/reflection-blog-1/</guid>
      <description>從 2019 開始架設自己的 Blog 的心路歷程。使用過 Wordpress、Medium、CoderBridge、Blogger，最後選擇了 Hugo 並且自討苦吃。</description>
      <content:encoded><![CDATA[<p>其實我的 Blog 是寫給自己看的。因為我時常忘記怎麼解決問題、怎麼製作功能、忘記是做了什麼蠢事。因此產生這個 Blog 用來記錄我的跌跌撞撞的過程。</p>
<h2 id="前言">前言</h2>
<p>在大學寫程式時遇到問題去 Google 查，很多時候很難下關鍵字，主要是自己犯蠢導致很難知道原因。自然而然也很難對症下藥，很多時候只是重打或參考(?)同學就能解決學生時期遇到的問題。</p>
<p>當開始工作時的第一年內，遇到的問題基本上還是類似的，因為我實在是太菜了，會遇到一些其實很基本又很無言的低級錯誤，一直重複的犯錯麻煩其他同事幫忙 debug，所以我一直有一個念頭想架設自己的 Blog。記錄解決過程和解決方式，提醒未來自己有錯誤可以來這邊看，假如又可以幫助別人其實也不錯。</p>
<h2 id="blogger">Blogger</h2>
<p>第一個 Blog 是使用大學某堂課程用到的 <a href="https://www.blogger.com/">Blogger</a>，其實也沒太認真研究這個 Blog，因為覺得不夠好看用了一下沒有認真的使用。</p>
<p>多年之後看到 <a href="http://teddy-chen-tw.blogspot.com/">搞笑談軟工</a> 的 Blog，才知道 Blog 的重要的部分其實不是選用什麼架構，<strong>持續寫作</strong> 才是最重要的核心。</p>
<h2 id="wordpress">Wordpress</h2>
<p>2018 時覺得自己的學習成長曲線變慢了，可能是因為都接觸類似的東西，工作上也大部分內容都能應付，也不會像以前一樣回家繼續寫程式，簡單來講就是發現自己進入了舒適圈(?)。就很坎坷不安，於是就開始買書學習、跟人學習。</p>
<p>2019 的某天 Unity 程式社群，有人發問推薦的程式書籍，而 <a href="https://tedsieblog.wordpress.com/">阿祥的開發日常</a> 的 Ted 回答了 <a href="https://www.tenlong.com.tw/products/9787115429476">軟技能代碼之外的生存指南</a>。整本書內容都沒在講程式的部分，大部分內容都是在講工程師除了工作以外的事情，例如運動、投資、面試、等等，推薦沒看過的工程師可以買，對於我個人是獲益良多，也是因為看了才有想認真的自己架設 Blog。</p>
<p>書的內容其實就有推薦架設屬於自己的 Blog，當時看到就想到我當年的想法，是沒有想要跟作者一樣利用 Blog 賺錢，畢竟技術不到家。倒是覺得可以當一個不錯的作品集，於是就開始在架設自己的 Wordpress。</p>
<p>當時是看著 <a href="https://jessielab.com/wordpress%E6%95%99%E5%AD%B8-setting-up-a-website/">教學</a> 文章邊看邊選擇，過程除了刷卡付錢沒有什麼難度，我在 <a href="https://www.namecheap.com/">NameCheap</a> 買網址，虛擬主機則是使用 <a href="https://www.siteground.com/">SiteGround</a>。</p>
<h3 id="使用三年心得-20192020">使用三年心得 (2019~2020)</h3>
<table>
<thead>
<tr>
<th style="text-align:center">年分</th>
<th style="text-align:right">SiteGround</th>
<th style="text-align:right">NameCheap</th>
<th style="text-align:right">花費(NTD)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一年</td>
<td style="text-align:right">1493</td>
<td style="text-align:right">285</td>
<td style="text-align:right">1778</td>
</tr>
<tr>
<td style="text-align:center">第二年</td>
<td style="text-align:right">5375</td>
<td style="text-align:right">315</td>
<td style="text-align:right">5690</td>
</tr>
<tr>
<td style="text-align:center">第三年</td>
<td style="text-align:right">0</td>
<td style="text-align:right">368</td>
<td style="text-align:right">368</td>
</tr>
<tr>
<td style="text-align:center">總花費</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right">7836</td>
</tr>
</tbody>
</table>
<p>第一年 1778 元。而且很多功能可以玩、可以使用，整體使用是很滿意的。而到了第二年，沒有認真確認第一年花費多少就直接續約了，收到扣款通知才知道收費真的<strong>很貴</strong>。</p>
<p>第一年跟第二年價格差了 <strong>3912</strong> 元，當時也沒有想到要退款，想說明年扣款時再來處理。</p>
<p>到了第三年，就打算不續約 SiteGround，所以開始把文章轉移去 <a href="https://medium.com/">Medium</a>，不過 NameCheap 是有持續付費的，畢竟費用還是較少，而且網址現在還在使用。</p>
<p>後來用 Hugo 架設這個 Blog，才知道 Wordpress 的好，很多事情都很簡單就完成（SEO、theme、等等）。</p>
<h2 id="結論">結論</h2>
<p>整體而言 Wordpress 對於新手的我架設 Blog，確實是不錯的體驗，只要有錢基本都能處理。不過續約的花費太貴，所以才放棄使用 SiteGround，尋找一些免費的方式。</p>
<p>當時使用 NameCheap 時也有被盜刷過，記得要綁定 2FA、密碼不要重複。
<img loading="lazy" src="https://imgur.com/pJBH4Q6.jpg" alt="img_1"  />
</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity MathQuiz</title>
      <link>https://wenrongdev.com/posts/unity-mathquiz/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-mathquiz/</guid>
      <description>此專案為 Unity math quiz，是基於 Tutorial 2 Create a timed math quiz 文件改寫出來的專案。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>此專案為 Unity math quiz，是基於 <a href="https://docs.microsoft.com/en-us/visualstudio/ide/tutorial-2-create-a-timed-math-quiz">Tutorial 2: Create a timed math quiz</a> 文件改寫出來的專案。</p>
<p><img loading="lazy" src="https://i.imgur.com/Igy3NfA.gif" alt="img"  />
</p>
<h2 id="github"><a href="https://github.com/Wenrong274/MathQuiz">Github</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Calendar</title>
      <link>https://wenrongdev.com/posts/unity-calendar/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-calendar/</guid>
      <description>Unity 實做日曆功能。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://i.imgur.com/Pe4nXry.gif" alt="gif"  />
</p>
<h2 id="使用方式">使用方式</h2>
<p>預設日期為<code>當天日期</code>。</p>
<p>可以直接使用 <code>UnityCalendar.GetDate()</code> 取得使用者設定日期，假如有錯誤會回報錯誤。</p>
<p><code>testGetDate.cs</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> OnClick_GetDate()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    DateTime dt = unityCalendar.GetDate();
</span></span><span style="display:flex;"><span>    text.text = dt.ToString(<span style="color:#e6db74">&#34;yyyy-MM-dd&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> OnClick_Clear()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    text.text = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    unityCalendar.Init();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="github"><a href="https://github.com/Wenrong274/Unity-Calendar">Github</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Addressable</title>
      <link>https://wenrongdev.com/posts/unity-addressable/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-addressable/</guid>
      <description>主要是實作 Addressable hotfix 的寫法。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>主要是實作 Addressable hotfix 的寫法。</p>
<p>基本 Unity-Addressable 安裝及 Remote 設定可以參考這篇 <a href="https://medium.com/@nai.hsue/unity%E7%AD%86%E8%A8%98-addressable-asset-system-dbebf981143b">Unity 筆記 Addressable Asset System</a>。</p>
<p>詳細解說可以參考</p>
<p>Unity Addressables 深入浅出<a href="https://blog.csdn.net/qq_14903317/article/details/108509938">(一)</a>、<a href="https://blog.csdn.net/qq_14903317/article/details/108529590">(二)</a>、<a href="https://blog.csdn.net/qq_14903317/article/details/108582372">(三)</a></p>
<p><a href="https://arclee0117.wordpress.com/2020/09/10/unity-addressable-%E7%8D%A8%E7%AB%8B%E8%B3%87%E6%BA%90%E5%8C%85/">Unity Addressable 獨立資源包</a></p>
<h2 id="實例">實例</h2>
<h3 id="initialization">Initialization</h3>
<p>Initial Addressable System 是<code>必要</code>的假如不初始化會造成一些使用上的問題。</p>
<p>在 Start 上可直接初始化 Addressable System</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>IEnumerator Start()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> InitAddressablesAsync = Addressables.InitializeAsync();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> InitAddressablesAsync;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="update-catalog">Update Catalog</h3>
<p>Catalog 是所有檔案的紀錄檔(log)，不更新 Catalog 也是能下載 Asset，可是會造成無法 hotfix，所以需要再下載前更一次 Catalog。</p>
<h4 id="catalog-path">Catalog Path</h4>
<p>依 Window 為例，Catalog 更新後會放自動放置在</p>
<p><code>C:\Users\[PC Name]\AppData\LocalLow\[Company Name]\[Product Name]\com.unity.addressables</code></p>
<table>
<thead>
<tr>
<th style="text-align:left">名稱</th>
<th style="text-align:left">解釋</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[PC Name]</td>
<td style="text-align:left">系統使用者名稱</td>
</tr>
<tr>
<td style="text-align:left">[Company Name]</td>
<td style="text-align:left">Unity 專案 Company Name</td>
</tr>
<tr>
<td style="text-align:left">[Product Name]</td>
<td style="text-align:left">Unity 專案 Product Name</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="https://imgur.com/QAbjzCM.jpg" alt="asset_1"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>IEnumerator UpdateCatalogCoro()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    List&lt;<span style="color:#66d9ef">string</span>&gt; catalogsToUpdate = <span style="color:#66d9ef">new</span> List&lt;<span style="color:#66d9ef">string</span>&gt;();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> checkCatalogHandle = Addressables.CheckForCatalogUpdates(<span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> checkCatalogHandle;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (checkCatalogHandle.Status == AsyncOperationStatus.Succeeded)
</span></span><span style="display:flex;"><span>        catalogsToUpdate = checkCatalogHandle.Result;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (catalogsToUpdate.Count &gt; <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> updateCatalogHandle = Addressables.UpdateCatalogs(catalogsToUpdate, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> updateCatalogHandle;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="update-asset">Update Asset</h3>
<p>下載好的 Asset，在測試時不清除是會造成無法測試下載流程，可是可以手動清除下載 Asset。</p>
<h4 id="asset-path">Asset Path</h4>
<p>依 Window 為例，下載好的 Asset 更新後會放自動放置在</p>
<p><code>C:\Users\[PC Name]\AppData\LocalLow\Unity\[Company Name]_[Product Name]</code></p>
<table>
<thead>
<tr>
<th style="text-align:left">名稱</th>
<th style="text-align:left">解釋</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[PC Name]</td>
<td style="text-align:left">系統使用者名稱</td>
</tr>
<tr>
<td style="text-align:left">[Company Name]</td>
<td style="text-align:left">Unity 專案 Company Name</td>
</tr>
<tr>
<td style="text-align:left">[Product Name]</td>
<td style="text-align:left">Unity 專案 Product Name</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="https://imgur.com/Av0faq4.jpg" alt="asset_2"  />
</p>
<h4 id="update-all-asset">Update All Asset</h4>
<p>這個方式是使用 AA 系統紀錄 Catalog 取得出來的位置（Locator），在使用 <code>GetDownloadSizeAsync</code> 來確認檔案有無更新，來達成更新所有檔案。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>IEnumerator UpdateAllGroupsCoro()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> loc <span style="color:#66d9ef">in</span> Addressables.ResourceLocators)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> key <span style="color:#66d9ef">in</span> loc.Keys)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> sizeAsync = Addressables.GetDownloadSizeAsync(key);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> sizeAsync;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">long</span> totalDownloadSize = sizeAsync.Result;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (sizeAsync.Result &gt; <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> downloadAsync = Addressables.DownloadDependenciesAsync(key);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">while</span> (!downloadAsync.IsDone)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">float</span> percent = downloadAsync.PercentComplete;
</span></span><span style="display:flex;"><span>                    Debug.Log(<span style="color:#e6db74">$&#34;{key} = percent {(int)(totalDownloadSize * percent)}/{totalDownloadSize}&#34;</span>);
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> WaitForEndOfFrame();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                Addressables.Release(downloadAsync);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            Addressables.Release(sizeAsync);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="update-label-asset">Update label Asset</h4>
<p>這個方式是使用 Label 下載特定資源。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>IEnumerator UpdateLabelAsset(<span style="color:#66d9ef">string</span> label)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">long</span> updateLabelSize = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#66d9ef">async</span> = Addressables.GetDownloadSizeAsync(label);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">async</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">async</span>.Status == AsyncOperationStatus.Succeeded)
</span></span><span style="display:flex;"><span>        updateLabelSize = <span style="color:#66d9ef">async</span>.Result;
</span></span><span style="display:flex;"><span>    Addressables.Release(<span style="color:#66d9ef">async</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (updateLabelSize == <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Debug.Log(<span style="color:#e6db74">$&#34;{label} last version&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> DownloadLabelAsset(label);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IEnumerator DownloadLabelAsset(<span style="color:#66d9ef">string</span> label)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> downloadAsync = Addressables.DownloadDependenciesAsync(label, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (!downloadAsync.IsDone)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">float</span> percent = downloadAsync.PercentComplete;
</span></span><span style="display:flex;"><span>        Debug.Log(<span style="color:#e6db74">$&#34;{label}: {downloadAsync.PercentComplete * 100} %&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> WaitForEndOfFrame();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    Addressables.Release(downloadAsync);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Debug.Log(<span style="color:#e6db74">$&#34;{label} UpdateAssets finish&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="clear-asset">Clear Asset</h3>
<p>刪除 <a href="#asset-path">Asset Path</a> 路徑下載的檔案。</p>
<h4 id="clear-all-asset">Clear All Asset</h4>
<p><code>Caching.ClearCache()</code> 是能夠完整的清除下載的所有檔案，但是不能單獨使用，還要搭配 <code>Addressables.ClearDependencyCacheAsync</code> 才能清除 Catalog 紀錄的下載資訊。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>IEnumerator ClearAllAssetCoro()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> locats <span style="color:#66d9ef">in</span> Addressables.ResourceLocators)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> <span style="color:#66d9ef">async</span> = Addressables.ClearDependencyCacheAsync(locats.Keys, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">async</span>;
</span></span><span style="display:flex;"><span>        Addressables.Release(<span style="color:#66d9ef">async</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    Caching.ClearCache();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="clear-label-asset">Clear Label Asset</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>IEnumerator ClearAssetCoro(<span style="color:#66d9ef">string</span> label)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#66d9ef">async</span> = Addressables.LoadResourceLocationsAsync(label);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">async</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> locats = <span style="color:#66d9ef">async</span>.Result;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">var</span> locat <span style="color:#66d9ef">in</span> locats)
</span></span><span style="display:flex;"><span>        Addressables.ClearDependencyCacheAsync(locat.PrimaryKey);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="githubgithub"><a href="https://github.com/Wenrong274/Unity-Addressable">Github</a></h2>
<h2 id="小結">小結</h2>
<p>write something cool&hellip;</p>
<h2 id="參考連結">參考連結</h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity ParticlePath</title>
      <link>https://wenrongdev.com/posts/unity-particlepath/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-particlepath/</guid>
      <description>Unity 實作粒子路徑系統。</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://i.imgur.com/tNmcGdz.gif" alt="demogif"  />
</p>
<h2 id="githubgithub"><a href="https://github.com/hybrid274/ParticlePath">GitHub</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Dimmer</title>
      <link>https://wenrongdev.com/posts/unity-dimmer/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-dimmer/</guid>
      <description>Unity 調整 Android、iOS 系統亮度功能。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>Unity 調整 Android、iOS 系統亮度功能。</p>
<h2 id="使用方式">使用方式</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span>Dimmer.SetBrightness.DoAction(<span style="color:#66d9ef">value</span>);
</span></span></code></pre></div><h2 id="github"><a href="https://github.com/Wenrong274/Unity-Dimmer">Github</a></h2>
<h2 id="參考連結">參考連結</h2>
<p><a href="https://qiita.com/Shunsuke-Suzuki-Gen/items/5af162d7b169fd4c7e85">Unity から iOS&amp;Android の画面輝度を MAX にする方法</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Add Text Spacing for Unity</title>
      <link>https://wenrongdev.com/posts/add-text-spacing-for-unity/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/add-text-spacing-for-unity/</guid>
      <description>在 UnityEngine.UI.Text 增加 TextSpacing，且調整 TextSpacing 的 Spacing 調整文字間格。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>在 <code>UnityEngine.UI.Text</code> 增加 TextSpacing，且調整 TextSpacing 的 <code>Spacing</code> 調整文字間格。</p>
<h2 id="scripts">Scripts</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System.Collections.Generic;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> UnityEngine;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> UnityEngine.UI;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">[AddComponentMenu(&#34;UI/Effects/TextSpacing&#34;)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TextSpacing</span> : BaseMeshEffect
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#region</span> Struct
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> HorizontalAligmentType
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Left,
</span></span><span style="display:flex;"><span>        Center,
</span></span><span style="display:flex;"><span>        Right
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Line</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 起點索引</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> StartVertexIndex { <span style="color:#66d9ef">get</span> { <span style="color:#66d9ef">return</span> _startVertexIndex; } }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> _startVertexIndex = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 終點索引</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> EndVertexIndex { <span style="color:#66d9ef">get</span> { <span style="color:#66d9ef">return</span> _endVertexIndex; } }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> _endVertexIndex = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 該行佔的點數目</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> VertexCount { <span style="color:#66d9ef">get</span> { <span style="color:#66d9ef">return</span> _vertexCount; } }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> _vertexCount = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> Line(<span style="color:#66d9ef">int</span> startVertexIndex, <span style="color:#66d9ef">int</span> length)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            _startVertexIndex = startVertexIndex;
</span></span><span style="display:flex;"><span>            _endVertexIndex = length * <span style="color:#ae81ff">6</span> - <span style="color:#ae81ff">1</span> + startVertexIndex;
</span></span><span style="display:flex;"><span>            _vertexCount = length * <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#endregion</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">float</span> Spacing = <span style="color:#ae81ff">1f</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> ModifyMesh(VertexHelper vh)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (!IsActive() || vh.currentVertCount == <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> text = GetComponent&lt;Text&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (text == <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Debug.LogError(<span style="color:#e6db74">&#34;Missing Text component&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 水平對齊方式</span>
</span></span><span style="display:flex;"><span>        HorizontalAligmentType alignment;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (text.alignment == TextAnchor.LowerLeft || text.alignment == TextAnchor.MiddleLeft || text.alignment == TextAnchor.UpperLeft)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            alignment = HorizontalAligmentType.Left;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (text.alignment == TextAnchor.LowerCenter || text.alignment == TextAnchor.MiddleCenter || text.alignment == TextAnchor.UpperCenter)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            alignment = HorizontalAligmentType.Center;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            alignment = HorizontalAligmentType.Right;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> vertexs = <span style="color:#66d9ef">new</span> List&lt;UIVertex&gt;();
</span></span><span style="display:flex;"><span>        vh.GetUIVertexStream(vertexs);
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// var indexCount = vh.currentIndexCount;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> lineTexts = text.text.Split(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> lines = <span style="color:#66d9ef">new</span> Line[lineTexts.Length];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 根據lines數組中各個元素的長度計算每一行中第一個點的索引，每個字、字母、空母均佔6個點</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> i = <span style="color:#ae81ff">0</span>; i &lt; lines.Length; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 除最後一行外，vertexs對於前面幾行都有回車符佔了6個點</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (i == <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                lines[i] = <span style="color:#66d9ef">new</span> Line(<span style="color:#ae81ff">0</span>, lineTexts[i].Length + <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (i &gt; <span style="color:#ae81ff">0</span> &amp;&amp; i &lt; lines.Length - <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                lines[i] = <span style="color:#66d9ef">new</span> Line(lines[i - <span style="color:#ae81ff">1</span>].EndVertexIndex + <span style="color:#ae81ff">1</span>, lineTexts[i].Length + <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                lines[i] = <span style="color:#66d9ef">new</span> Line(lines[i - <span style="color:#ae81ff">1</span>].EndVertexIndex + <span style="color:#ae81ff">1</span>, lineTexts[i].Length);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        UIVertex vt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> i = <span style="color:#ae81ff">0</span>; i &lt; lines.Length; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> j = lines[i].StartVertexIndex; j &lt;= lines[i].EndVertexIndex; j++)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (j &lt; <span style="color:#ae81ff">0</span> || j &gt;= vertexs.Count)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                vt = vertexs[j];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> charCount = lines[i].EndVertexIndex - lines[i].StartVertexIndex;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (i == lines.Length - <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    charCount += <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (alignment == HorizontalAligmentType.Left)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    vt.position += <span style="color:#66d9ef">new</span> Vector3(Spacing * ((j - lines[i].StartVertexIndex) / <span style="color:#ae81ff">6</span>), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (alignment == HorizontalAligmentType.Right)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    vt.position += <span style="color:#66d9ef">new</span> Vector3(Spacing * (-(charCount - j + lines[i].StartVertexIndex) / <span style="color:#ae81ff">6</span> + <span style="color:#ae81ff">1</span>), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (alignment == HorizontalAligmentType.Center)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">var</span> offset = (charCount / <span style="color:#ae81ff">6</span>) % <span style="color:#ae81ff">2</span> == <span style="color:#ae81ff">0</span> ? <span style="color:#ae81ff">0.5f</span> : <span style="color:#ae81ff">0f</span>;
</span></span><span style="display:flex;"><span>                    vt.position += <span style="color:#66d9ef">new</span> Vector3(Spacing * ((j - lines[i].StartVertexIndex) / <span style="color:#ae81ff">6</span> - charCount / <span style="color:#ae81ff">12</span> + offset), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                vertexs[j] = vt;
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 以下注意點與索引的對應關係</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (j % <span style="color:#ae81ff">6</span> &lt;= <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    vh.SetUIVertex(vt, (j / <span style="color:#ae81ff">6</span>) * <span style="color:#ae81ff">4</span> + j % <span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (j % <span style="color:#ae81ff">6</span> == <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    vh.SetUIVertex(vt, (j / <span style="color:#ae81ff">6</span>) * <span style="color:#ae81ff">4</span> + j % <span style="color:#ae81ff">6</span> - <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="問題">問題</h2>
<p>無法自由換行</p>
<h2 id="參考連結">參考連結</h2>
<p><a href="https://blog.csdn.net/qq_38721111/article/details/102592001">UGUI 中 Text 的字间距</a></p>
<p><a href="https://blog.csdn.net/qq_38721111/article/details/102592001">UGUI 中随意调整 Text 中的字体间距</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Mobile Joystick</title>
      <link>https://wenrongdev.com/posts/mobile-joystick/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/mobile-joystick/</guid>
      <description>主要是用來測試 Unity 虛擬搖桿功能。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>主要是用來測試虛擬搖桿功能。</p>
<p>使用 <a href="https://assetstore.unity.com/packages/tools/input-management/joystick-pack-107631">Joystick Pack</a> 支援各輸入端接口偛件。</p>
<h2 id="tutorialtutorial"><a href="https://www.youtube.com/watch?v=8-X3BmvtXT0">Tutorial</a></h2>
<h2 id="github"><a href="https://github.com/Wenrong274/MobileJoystick">Github</a></h2>
<hr>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Folder Manager</title>
      <link>https://wenrongdev.com/posts/folder-manager/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/folder-manager/</guid>
      <description>Unity 視覺化管理使用路徑。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>視覺化管理使用路徑，不過目前功能還是很粗糙。</p>
<h2 id="feature">Feature</h2>
<p>視覺化管理</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Wenrong274/FolderManager/master/doc/img/img_1.jpg" alt="img_1"  />
</p>
<h2 id="usage">Usage</h2>
<p>Create path 之後會在
<code>Assets\FolderManager\StreamingAssets\FolderManager.asset</code>
出現 asset。</p>
<p><code>Asset</code> 即是<code>FolderManager.Folders</code>，因此可以直接宣告此 class 使用。</p>
<h2 id="github"><a href="https://github.com/Wenrong274/FolderManager">Github</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Data Access WebGL</title>
      <link>https://wenrongdev.com/posts/data-access-webgl/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/data-access-webgl/</guid>
      <description>Unity 在 WebGL 時存/讀檔案的方式，檔案是放在 IndexedDB。是有容量大小限制，所以需要注意存儲的檔案大小。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>Unity 在 WebGL 時存/讀檔案的方式，檔案是放在 IndexedDB。</p>
<p><code>IndexedDB</code> 是有容量大小限制，所以需要注意存儲的檔案大小。</p>
<h2 id="about-indexeddb">About IndexedDB</h2>
<p><a href="https://www.html5rocks.com/en/tutorials/offline/quota-research/">Working with quota on mobile browsers</a></p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Wenrong274/DataAccessWebGL/master/doc/img/1.png" alt="img_1"  />
</p>
<h2 id="githubhttpsgithubcomwenrong274dataaccesswebgl"><a href="https://github.com/Wenrong274/DataAccessWebGL">GitHub</a></h2>
<h2 id="introduction">Introduction</h2>
<ul>
<li>
<p>File Path</p>
<p><code>string.Format(&quot;{0}/{1}.dat&quot;, Application.persistentDataPath, FileName);</code></p>
</li>
<li>
<p>Save Method</p>
<p>DataAccess.Save(fileName, bytes);</p>
</li>
<li>
<p>Load Method</p>
<p>byte[] bytes = DataAccess.Load(fileName);</p>
</li>
<li>
<p>Example Scene</p>
<p><code>root\Assets\WebGL\Example\Scenes\Example</code></p>
</li>
</ul>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity Jenkins Build</title>
      <link>https://wenrongdev.com/posts/unity-jenkins-build/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-jenkins-build/</guid>
      <description>此為使用 Jenkins 輸出 Unity 專案注意事項。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>此為使用 Jenkins 輸出 Unity 專案注意事項。</p>
<h2 id="setting">Setting</h2>
<p>須注意 Unity 有無安裝輸出目標平台（Android、iOS、WebGL&hellip;）。</p>
<p>並且要設定 Jenkins 環境（AndroidSDK、JDK、Unity Editor）。</p>
<h3 id="jenkins-android-sdk">Jenkins Android SDK</h3>
<p>需要新增 Jenkins 環境變數（Environment variable），來設定 Android SDK 路徑。</p>
<p>Jenkins 頁面路徑為 <code>Manage Jenkins -&gt; Configure System -&gt; Global properties</code>。</p>
<p>設定如下圖：</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Wenrong274/UnityJenkinsBuild/master/doc/img/1.JPG" alt="img_1"  />
</p>
<p><code>Name</code>：<code>ANDROID_HOME</code></p>
<p><code>Value</code>：AndroidSDK 路徑。</p>
<h3 id="jenkins-jdk">Jenkins JDK</h3>
<p>JDK 版本請選 <code>Java SE 8</code>，因為 Unity 只支援 Java SE 8。</p>
<p>Jenkins 頁面路徑為 <code>Manage Jenkins -&gt; Global Tool Configuration -&gt; JDK</code>。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Wenrong274/UnityJenkinsBuild/master/doc/img/2.JPG" alt="img_2"  />
</p>
<h3 id="jenkins-unity3d-plugin">Jenkins Unity3d Plugin</h3>
<p>需要至 Plugin Manager 安裝 Unity3d Plugin。</p>
<p>Jenkins 頁面路徑為 <code>Manage Jenkins -&gt; Plugin Manager -&gt; Available</code></p>
<p>安裝完成後，需要設定 Unity Editor 路徑。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Wenrong274/UnityJenkinsBuild/master/doc/img/3.JPG" alt="img_3"  />
</p>
<p><code>Name</code>：unity version</p>
<p><code>Installation directory</code>：unity installed path</p>
<h3 id="jenkins-item">Jenkins item</h3>
<p>基本設置可參考 <a href="http://hoseex.blogspot.com/2017/12/jenkinsunity3d.html">使用 jenkins 建置 unity3d 專案</a> 介紹。</p>
<p>最主要是設定 <code>Editor command line arguments</code>。</p>
<p>頁面路徑：<code>Configure -&gt; General -&gt; Build</code></p>
<p>點選 Add build step -&gt; invoke Unity3d Editor，選擇對應的 Unity 編輯器版本。</p>
<p>在 Editor command line arguments 輸入</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>-projectPath &#34;$WORKSPACE/&#34; -executeMethod JenkinsBuild.BuildPlatforms -buildPath &#34;$WORKSPACE\Builds&#34; -android -batchmode -nographics -quit
</span></span></code></pre></div><p><code>-buildPath &quot;$WORKSPACE\Builds&quot;</code> &ldquo;$WORKSPACE\Builds 輸出放置資料夾路徑。</p>
<p><code>-android</code> 為輸出平台，可改為 -windows32、-windows64、-linux64、-macos、-android、-ios、-webgl。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Wenrong274/UnityJenkinsBuild/master/doc/img/4.JPG" alt="img_4"  />
</p>
<h2 id="github-repogithub"><a href="https://github.com/Wenrong274/UnityJenkinsBuild">GitHub Repo</a></h2>
<h2 id="reference">reference</h2>
<p><a href="http://hoseex.blogspot.com/2017/12/jenkinsunity3d.html">使用 jenkins 建置 unity3d 專案</a></p>
<p><a href="https://github.com/CarlHalstead/Jenkins-for-Unity-with-DigitalOcean/">Jenkins for Unity with DigitalOcean</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Hyperlinks in Unity Text</title>
      <link>https://wenrongdev.com/posts/hyperlinks-in-unity-text/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/hyperlinks-in-unity-text/</guid>
      <description>Unity uGUI Text support insert link and image。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>測試 <a href="https://github.com/akof1314/uGUI_LinkImageText">LinkImageText</a> 應用。</p>
<p><img loading="lazy" src="https://github.com/Wenrong274/HyperlinksText/blob/master/doc/img/1.png" alt="Img_1"  />
</p>
<h2 id="主要內容">主要內容</h2>
<p>使用 <a href="https://github.com/kimsama/Unity-QuickSheet">QuickSheet</a> 當資料庫，讓 <a href="https://github.com/setchi/FancyScrollView">FancyScrollView</a> 顯示資料庫名字。</p>
<p>點擊 FancyScrollView button 會在 <a href="https://github.com/akof1314/uGUI_LinkImageText">HypeLinkText</a> 顯示 name。</p>
<p>點擊 HypeLinkText 超連結文字，會顯示<code>超連結</code>內容。</p>
<h2 id="github-repohttpsgithubcomwenrong274hyperlinkstext"><a href="https://github.com/Wenrong274/HyperlinksText">GitHub repo</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>FCM Notifications Not Received on Android</title>
      <link>https://wenrongdev.com/posts/fcm-notifications-not-received-on-android/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/fcm-notifications-not-received-on-android/</guid>
      <description>沒辦法在 APP 不活躍或不喚醒（not active）狀態推送推播訊息解決方式。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>前陣子因為專案需要後台推播功能，所以開始測試 FCM(Firebase Cloud Messaging）功能。</p>
<p>測試的過程一直沒辦法在 APP 不活躍或不喚醒（not active）狀態推送推播訊息。</p>
<p>後來發現主因是<code>省電模式（Doze mode）</code>導致 APP 無法接受任何推波內容。</p>
<h2 id="參考連結">參考連結</h2>
<p><a href="https://developer.android.com/training/monitoring-device-state/doze-standby?hl=zh_cn">https://developer.android.com/training/monitoring-device-state/doze-standby?hl=zh_cn</a></p>
<p><a href="https://blog.csdn.net/pkorochi/article/details/87186659">https://blog.csdn.net/pkorochi/article/details/87186659</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Android P HTTP Error</title>
      <link>https://wenrongdev.com/posts/android-p-http-error/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/android-p-http-error/</guid>
      <description>在 Android 9.0 中使用 WebReqesut 時，URL 是需要用 Https 才能正常使用，不然 Response 都是 Error。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>在 Android 9.0 中使用 WebReqesut 時，URL 是需要用 Https 才能正常使用，不然 Response 都是 Error。（<a href="https://developer.android.com/about/versions/pie/android-9.0-changes-28?hl=zh-cn#apache-p">Google Doc</a>）</p>
<p>Error Log：<code>Cleartext HTTP traffic to 45.xx.xxx.xx not permitted</code></p>
<h2 id="solution">Solution</h2>
<p>在 <code>AndroidManifest.xml</code> 的 <code>application</code> 加入 <code>android:usesCleartextTraffic=&quot;true&quot;</code>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>    <span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;manifest</span> <span style="color:#960050;background-color:#1e0010">...</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;uses-permission</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.permission.INTERNET&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;application</span>
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">...</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">android:usesCleartextTraffic=</span><span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#960050;background-color:#1e0010">...</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/application&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/manifest&gt;</span>
</span></span></code></pre></div><h2 id="參考連結">參考連結</h2>
<p><a href="https://michaelyb.top/2018/08/Android-HTTP/">Android 中 HTTP 网络请求相关问题</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Launch From Within a Unity App Another Unity App Android</title>
      <link>https://wenrongdev.com/posts/launch-from-within-a-unity-app-another-unity-app-android/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/launch-from-within-a-unity-app-another-unity-app-android/</guid>
      <description>主要用來 Unity app A 如何傳遞資訊給 Unity app B。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>主要用來 Unity app A 如何傳遞資訊給 Unity app B。</p>
<h3 id="demo-script">Demo Script</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PropertyInfo</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> elementA = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> elementB = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> elementC = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Launch(<span style="color:#66d9ef">string</span> bundleId, <span style="color:#66d9ef">string</span> storelink)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">bool</span> fail = <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>    AndroidJavaClass up = <span style="color:#66d9ef">new</span> AndroidJavaClass(<span style="color:#e6db74">&#34;com.unity3d.player.UnityPlayer&#34;</span>);
</span></span><span style="display:flex;"><span>    AndroidJavaObject ca = up.GetStatic&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;currentActivity&#34;</span>);
</span></span><span style="display:flex;"><span>    AndroidJavaObject packageManager = ca.Call&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;getPackageManager&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    AndroidJavaObject launchIntent = <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        launchIntent = packageManager.Call&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;getLaunchIntentForPackage&#34;</span>, bundleId);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">catch</span> (Exception e)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        fail = <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (fail || launchIntent == <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>        Application.OpenURL(storelink);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        launchIntent.Call&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;putExtra&#34;</span>, <span style="color:#e6db74">&#34;elementA&#34;</span>, LaunchData.elementA);
</span></span><span style="display:flex;"><span>        launchIntent.Call&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;putExtra&#34;</span>, <span style="color:#e6db74">&#34;elementB&#34;</span>, LaunchData.elementB);
</span></span><span style="display:flex;"><span>        launchIntent.Call&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;putExtra&#34;</span>, <span style="color:#e6db74">&#34;elementC&#34;</span>, LaunchData.elementC);
</span></span><span style="display:flex;"><span>        ca.Call(<span style="color:#e6db74">&#34;startActivity&#34;</span>, launchIntent);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    up.Dispose();
</span></span><span style="display:flex;"><span>    ca.Dispose();
</span></span><span style="display:flex;"><span>    packageManager.Dispose();
</span></span><span style="display:flex;"><span>    launchIntent.Dispose();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="property">Property</h2>
<p>PropertyInfo 是用來接受資訊的 class，這邊可以自行修改。</p>
<hr>
<p><a href="https://wenrongdev.com/get-android-intent-data-for-unity/">Get Android intent Data for Unity</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Get Android Intent Data for Unity</title>
      <link>https://wenrongdev.com/posts/get-android-intent-data-for-unity/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/get-android-intent-data-for-unity/</guid>
      <description>主要用來 A App 呼叫 B App 時，B App 該如何接受資料。而 B App 是使用 &lt;code&gt;Unity&lt;/code&gt; 接收。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>主要用來 A App 呼叫 B App 時，B App 該如何接受資料。</p>
<p>而 B App 是使用 <code>Unity</code> 接收。</p>
<h3 id="demo-script">Demo Script</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PropertyInfo</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> elementA = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> elementB = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> elementC = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExternalCall</span> : MonoBehaviour
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    PropertyInfo info = <span style="color:#66d9ef">new</span> PropertyInfo();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Awake()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span><span style="color:#75715e">#if</span> (!UNITY_EDITOR &amp;&amp; UNITY_ANDROID)
</span></span><span style="display:flex;"><span>        CreatePushClass(<span style="color:#66d9ef">new</span> AndroidJavaClass(<span style="color:#e6db74">&#34;com.unity3d.player.UnityPlayer&#34;</span>));
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> CreatePushClass(AndroidJavaClass UnityPlayer)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span><span style="color:#75715e">#if</span> UNITY_ANDROID
</span></span><span style="display:flex;"><span>        AndroidJavaObject currentActivity = UnityPlayer.GetStatic&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;currentActivity&#34;</span>);
</span></span><span style="display:flex;"><span>        AndroidJavaObject intent = currentActivity.Call&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;getIntent&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">bool</span> elementA_hasExtra = IsBool(intent, <span style="color:#e6db74">&#34;elementA&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">bool</span> elementB_hasExtra = IsBool(intent, <span style="color:#e6db74">&#34;elementB&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">bool</span> elementC_hasExtra = IsBool(intent, <span style="color:#e6db74">&#34;elementC&#34;</span>);
</span></span><span style="display:flex;"><span>        AndroidJavaObject extras = GetExtras(intent);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (extras != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (elementA_hasExtra)
</span></span><span style="display:flex;"><span>                info.elementA = GetProperty(extras, <span style="color:#e6db74">&#34;elementA&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (elementB_hasExtra)
</span></span><span style="display:flex;"><span>                info.elementB = GetProperty(extras, <span style="color:#e6db74">&#34;elementB&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (elementC_hasExtra)
</span></span><span style="display:flex;"><span>                info.elementC = GetProperty(extras, <span style="color:#e6db74">&#34;elementC&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">bool</span> IsBool(AndroidJavaObject intent, <span style="color:#66d9ef">string</span> method)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">bool</span> b = <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            b = intent.Call&lt;<span style="color:#66d9ef">bool</span>&gt;(<span style="color:#e6db74">&#34;hasExtra&#34;</span>, method);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">catch</span> (Exception e)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Debug.Log(e.Message);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> b;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> AndroidJavaObject GetExtras(AndroidJavaObject intent)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        AndroidJavaObject extras = <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            extras = intent.Call&lt;AndroidJavaObject&gt;(<span style="color:#e6db74">&#34;getExtras&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">catch</span> (Exception e)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Debug.Log(e.Message);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> extras;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">string</span> GetProperty(AndroidJavaObject extras, <span style="color:#66d9ef">string</span> name)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">string</span> s = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            s = extras.Call&lt;<span style="color:#66d9ef">string</span>&gt;(<span style="color:#e6db74">&#34;getString&#34;</span>, name);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">catch</span> (Exception e)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Debug.Log(e.Message);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> s;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="property">Property</h3>
<p><code>PropertyInfo</code> 是用來接受資訊的 <code>class</code>，這邊可以自行修改。</p>
<hr>
<p><a href="https://wenrongdev.com/launch-from-within-a-unity-app-another-unity-appandroid/">Launch from within a Unity app another Unity app(Android)</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Example Inno Setup</title>
      <link>https://wenrongdev.com/posts/example-inno-setup/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/example-inno-setup/</guid>
      <description>簡易使用 Inno Setup 打包教學。</description>
      <content:encoded><![CDATA[<h2 id="install">Install</h2>
<p>去官網下載 <a href="http://www.jrsoftware.org/isinfo.php">Inno Setup</a>，請下載 <strong>Stable Release</strong> 版本。</p>
<h2 id="add-language">Add Language</h2>
<ol>
<li>下載官方提供的 <a href="https://github.com/jrsoftware/issrc">Github</a>，直接下載 <strong>Releases</strong> 版本，完成後解壓縮。</li>
<li>複製 <code>root/Files/Languages</code> 資料夾，貼上並且覆蓋 <strong>Inno Setup 安裝資料夾</strong>。<img loading="lazy" src="https://imgur.com/3gD0X18.jpg" alt="img_1"  />
</li>
</ol>
<h2 id="使用方式">使用方式</h2>
<p>可以參考以下腳本，也可以自己寫，不知道寫法可以參考<a href="http://www.jrsoftware.org/ishelp/">官方文件</a>。</p>
<pre tabindex="0"><code class="language-Pascal" data-lang="Pascal">
#define MyAppGUID &#34;{{D0D7EBDD-2493-4086-A306-AB012D2AFA93}&#34;
#define MyAppName &#34;Examle&#34;
#define MyAppFolder &#34;ExampleFolder&#34;
#define MyAppSetupExeName &#34;Examle&#34;

#define MyAppExeName &#34;Examle.exe&#34;
#define MyAppURL &#34;https://wenrongdev.com/&#34;
#define MyAppPublisher &#34;wen rong studio&#34;

[Setup]
AppId={#MyAppGUID}
AppName={#MyAppName}
AppVersion=0.1.0
AppVerName={#MyAppName}
AppPublisher = {#MyAppPublisher}
AppPublisherURL = {#MyAppURL}
AppSupportURL = {#MyAppURL}
AppUpdatesURL = {#MyAppURL}
Compression = lzma2
DefaultDirName={commonpf32}\{#MyAppFolder}
DisableProgramGroupPage=yes
DefaultGroupName={#MyAppName}
UninstallDisplayIcon={app}ForwardSlash{#MyAppExeName}
SolidCompression = no
OutputDir = &#34;Setup&#34;
OutputBaseFilename = {#MyAppSetupExeName}
ShowLanguageDialog=yes

// 是否需要分割
DiskSpanning=yes
SlicesPerDisk=3
DiskSliceSize=1566000000
///

[Languages]
Name: EN; MessagesFile: &#34;compiler:Default.isl&#34;
Name: CT; MessagesFile: &#34;compiler:Languages\Unofficial\ChineseTraditional.isl&#34;
Name: CS; MessagesFile: &#34;compiler:Languages\Unofficial\ChineseSimplified.isl&#34;
Name: JP; MessagesFile: &#34;compiler:Languages\Japanese.isl&#34;

[CustomMessages]
MyAppName = {#MyAppName}
MyAppVerName = {#MyAppName} %1

[Messages]
BeveledLabel = {#MyAppURL}

[Dirs]
Name: &#34;{app}&#34;; Permissions: everyone-full

[Files]
Source: &#34;{#MyAppFolder}\*&#34;; DestDir: &#34;{app}\{#MyAppFolder}&#34;; Flags: ignoreversion recursesubdirs

[Icons]
Name: &#34;{userdesktop}\{cm:MyAppName}&#34;; Filename: &#34;{app}\{#MyAppFolder}\{#MyAppExeName}&#34;;

[Code]
function GetNumber(var temp: String): Integer;
var
  part: String;
  pos1: Integer;
begin
  if Length(temp) = 0 then
  begin
    Result := -1;
    Exit;
  end;
    pos1 := Pos(&#39;.&#39;, temp);
    if (pos1 = 0) then
    begin
      Result := StrToInt(temp);
    temp := &#39;&#39;;
    end
    else
    begin
    part := Copy(temp, 1, pos1 - 1);
      temp := Copy(temp, pos1 + 1, Length(temp));
      Result := StrToInt(part);
    end;
end;

function CompareInner(var temp1, temp2: String): Integer;
var
  num1, num2: Integer;
begin
    num1 := GetNumber(temp1);
  num2 := GetNumber(temp2);
  if (num1 = -1) or (num2 = -1) then
  begin
    Result := 0;
    Exit;
  end;
      if (num1 &gt; num2) then
      begin
        Result := 1;
      end
      else if (num1 &lt; num2) then
      begin
        Result := -1;
      end
      else
      begin
        Result := CompareInner(temp1, temp2);
      end;
end;

function CompareVersion(str1, str2: String): Integer;
var
  temp1, temp2: String;
begin
    temp1 := str1;
    temp2 := str2;
    Result := CompareInner(temp1, temp2);
end;

function InitializeSetup(): Boolean;
var
  oldVersion: String;
  uninstaller: String;
  ErrorCode: Integer;
  vCurID      :String;
  vCurAppName :String;
begin
  vCurID:= &#39;{#SetupSetting(&#34;AppId&#34;)}&#39;;
  vCurAppName:= &#39;{#SetupSetting(&#34;AppName&#34;)}&#39;;
  vCurID:= Copy(vCurID, 2, Length(vCurID) - 1);

  if RegKeyExists(HKEY_LOCAL_MACHINE,
    &#39;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\&#39; + vCurID + &#39;_is1&#39;) then
  begin
    RegQueryStringValue(HKEY_LOCAL_MACHINE,
      &#39;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\&#39; + vCurID + &#39;_is1&#39;,
      &#39;DisplayVersion&#39;, oldVersion);
    if (CompareVersion(oldVersion, &#39;{#SetupSetting(&#34;AppVersion&#34;)}&#39;) &lt; 0) then
    begin
      if MsgBox(&#39;Version &#39; + oldVersion + &#39; of &#39; + vCurAppName + &#39; is already installed. Continue to use this old version?&#39;,
        mbConfirmation, MB_YESNO) = IDYES then
      begin
        Result := False;
      end
      else
      begin
          RegQueryStringValue(HKEY_LOCAL_MACHINE,
            &#39;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\&#39; + vCurID + &#39;_is1&#39;,
            &#39;UninstallString&#39;, uninstaller);
          ShellExec(&#39;runas&#39;, uninstaller, &#39;/SILENT&#39;, &#39;&#39;, SW_HIDE, ewWaitUntilTerminated, ErrorCode);
          Result := True;
      end;
    end
    else
    begin
      MsgBox(&#39;Version &#39; + oldVersion + &#39; of &#39; + vCurAppName + &#39; is already installed. This installer will exit.&#39;,
        mbInformation, MB_OK);
      Result := False;
    end;
  end
  else
  begin
    Result := True;
  end;
end;
</code></pre><h2 id="修改方式">修改方式</h2>
<p>假如是使用複製舊有的 <code>.iss 檔</code>，只需要修改幾個需要注意的文字即可。</p>
<p>正常的資料夾結構</p>
<table>
<thead>
<tr>
<th style="text-align:left">Folder</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ExampleFolder</td>
<td style="text-align:left">打包前的資料夾</td>
</tr>
<tr>
<td style="text-align:left">Setup</td>
<td style="text-align:left">Inno Setup 輸出的資料夾</td>
</tr>
<tr>
<td style="text-align:left">.iss</td>
<td style="text-align:left">Inno Setup Script</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="https://imgur.com/AXDhz5x.jpg" alt="img_2"  />
</p>
<h3 id="修改-iss">修改 .iss</h3>
<pre tabindex="0"><code class="language-Pascal" data-lang="Pascal">#define MyAppGUID &#34;GUID&#34;
#define MyAppName &#34;Examle&#34;
#define MyAppFolder &#34;ExampleFolder&#34;
#define MyAppSetupExeName &#34;Examle&#34;
#define MyAppExeName &#34;Examle.exe&#34;
#define MyAppURL &#34;https://wenrongdev.com/&#34;
#define MyAppPublisher &#34;wen rong studio&#34;
</code></pre><h3 id="需修改地方">需修改地方</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Arg</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MyAppGUID</td>
<td style="text-align:left">安裝系統 GUID，產生方式為 <code>Tools/Generated GUID</code>。</td>
</tr>
<tr>
<td style="text-align:left">MyAppName</td>
<td style="text-align:left">桌面路徑名稱 。</td>
</tr>
<tr>
<td style="text-align:left">MyAppFolder</td>
<td style="text-align:left">安裝目錄名稱。</td>
</tr>
<tr>
<td style="text-align:left">MyAppSetupExeName</td>
<td style="text-align:left">Inno Setup 輸出安裝檔名稱 。</td>
</tr>
</tbody>
</table>
<h4 id="取得-guid-方法">取得 GUID 方法</h4>
<p><img loading="lazy" src="https://imgur.com/d05PwU1.jpg" alt="img_3"  />
</p>
<h2 id="githubhttpsgithubcomwenrong274exampleinnosetup"><a href="https://github.com/Wenrong274/ExampleInnoSetup">Github</a></h2>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Whitelist for Windows UAC</title>
      <link>https://wenrongdev.com/posts/whitelist-for-windows-uac/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/whitelist-for-windows-uac/</guid>
      <description>為了ㄧ般使用者的權限問題也不能關閉 Windows UAC。 也不可能修改一般使用者的權限，所以需要讓 Windows UAC 加入此程式為白名單，這樣就不會每次都會跳出權限要求。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>因為某些程式開啟時，會跳出需要系統管理員（Administrator）權限執行程式，也導致了只要是ㄧ般使用者每次開啟時都需要輸入系統管理員密碼來執行。為了ㄧ般使用者的權限問題也不能關閉 Windows UAC。 也不可能修改一般使用者的權限，所以需要讓 Windows UAC 加入此程式為白名單，這樣就不會每次都會跳出權限要求。</p>
<h2 id="已知限制條件">已知限制條件</h2>
<ol>
<li>程式必須以 Administrator 執行</li>
<li>一般使用者可以執行</li>
<li>不可完全關閉 Windows UAC</li>
</ol>
<h2 id="解決方式">解決方式</h2>
<p>根據<a href="https://www.taode.idv.tw/wordpress/?p=639">不變更 UAC 安全性，但執行程式時又不擾民的設定方式</a>，可以在 Windows Regedit 新增白名單。</p>
<ol>
<li>Win+R 輸入 regedit 執行</li>
<li>根據此路徑尋找 <code>HKEY_CURRENT_USERS\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers</code></li>
<li>右鍵新增字串值，名稱為程式（exe）路徑、資料為<code>~ RunAsInvoker</code></li>
</ol>
<h2 id="c-解決方式">C# 解決方式</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RegEditWhiteList</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> keyName { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">string</span> root = <span style="color:#e6db74">@&#34;Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">string</span> keyValue = <span style="color:#e6db74">&#34;~ RunAsInvoker&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> RegEditWhiteList(<span style="color:#66d9ef">string</span> keyName)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.keyName = keyName;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SendRegedit()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        RegistryKey key = Registry.CurrentUser.OpenSubKey(root, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>        key.SetValue(keyName, keyValue,RegistryValueKind.String);
</span></span><span style="display:flex;"><span>        key.Close();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="githubrepo"><a href="https://github.com/Wenrong274/UACWhitelist">GitHub</a></h2>
<h3 id="使用方式">使用方式</h3>
<p>因為修改註冊碼是修正當前使用者的註冊碼，因此只要換使用者就需要再新增一次白名單。</p>
<h2 id="參考資料">參考資料</h2>
<p><a href="https://www.taode.idv.tw/wordpress/?p=639">不變更 UAC 安全性，但執行程式時又不擾民的設定方式</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>IOS Build Note for Unity 2019 Vuforia</title>
      <link>https://wenrongdev.com/posts/ios-build-note-for-unity-2019-vuforia/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/ios-build-note-for-unity-2019-vuforia/</guid>
      <description>Vuforia iOS Build and Run Error。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<ul>
<li>Unity 2019.2.11f1</li>
<li>Vuforia 8.5.9</li>
</ul>
<h3 id="ios-build-and-run-error">iOS Build and Run Error</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ld: library not found for -liPhone-lib
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>clang: error: linker command failed with exit code 1 (use -v to see invocation)
</span></span></code></pre></div><p><img loading="lazy" src="https://i.imgur.com/VfEWoVv.jpg" alt="img_1"  />
</p>
<h4 id="solution---ios-build-and-run-error">Solution - iOS Build and Run Error</h4>
<p>Build Setting -&gt; Search Paths -&gt; Library Search Paths</p>
<p>移除 <code>&quot;$(SECROOT)&quot;</code> 參數</p>
<p><img loading="lazy" src="https://i.imgur.com/mHa5XkT.jpg" alt="img_2"  />
</p>
<h2 id="ios-archive-error">iOS Archive Error</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ld: warning: ignoring file ...  building for iOS-armv7 but attempting to link with file built for iOS-arm64.
</span></span></code></pre></div><p><img loading="lazy" src="https://i.imgur.com/7YCtki6.jpg" alt="img_3"  />
</p>
<h4 id="solution---ios-archive-error">Solution - iOS Archive Error</h4>
<p>根據 <a href="https://library.vuforia.com/content/vuforia-library/en/articles/Release_Notes/Vuforia-SDK-Release-Notes.html">Vuforia Engine Release Notes</a> 在 <code>v8.1.7</code>之後不支援 <code>32-bit</code>，並且最低支援 <code>iOS 11</code>，因此需要把專案版本最低版本設定為 iOS。</p>
<ul>
<li>
<p>設定 iOS architectures</p>
<p>Build Setting -&gt; Architectures -&gt; Architectures</p>
<p>Architectures 改為 <code>Standard architectures</code></p>
<p><img loading="lazy" src="https://i.imgur.com/1fcwuH9.jpg" alt="img_5"  />
</p>
</li>
<li>
<p>設定 iOS 版本</p>
<p>Build Setting -&gt; Deployment -&gt; iOS Deployment Target</p>
<p>iOS Deployment Target 改為 <code>iOS 11.0</code></p>
<p><img loading="lazy" src="https://i.imgur.com/rPGArpU.jpg" alt="img_4"  />
</p>
</li>
</ul>
<h2 id="ios-distribution-error">iOS Distribution Error</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ERROR ITMS-90534
</span></span></code></pre></div><p><img loading="lazy" src="https://i.imgur.com/0KoHlnL.jpg" alt="img_6"  />
</p>
<h3 id="solution---ios-distribution-error">Solution - iOS Distribution Error</h3>
<p>請使用 <a href="https://developer.apple.com/download/"><strong>Xcode 11.2.1</strong></a> 輸出，即可修正。</p>
<h2 id="參考文章">參考文章</h2>
<p><a href="https://qiita.com/Narinii/items/d571ac9a4b2193f19bef">Unity Xcode Error &ldquo;library not found for -&rdquo; の解決方法</a></p>
<p><a href="https://stackoverflow.com/a/58747930">Can&rsquo;t submit apps to AppStore: ERROR ITMS-90534: &ldquo;Invalid Toolchain</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Install IPA With OTA</title>
      <link>https://wenrongdev.com/posts/install-ipa-with-ota/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/install-ipa-with-ota/</guid>
      <description>由於 iTunes 12.6 之後不提供 .ipa 檔安裝，導致無法提供測試 App，所以有人研究出很多安裝方式。不過這邊主要是介紹 OTA 的方式。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>由於 iTunes 12.6 之後不提供 .ipa 檔安裝，導致無法提供測試 App，所以有人研究出很多安裝方式。不過這邊主要是介紹 OTA 的方式。</p>
<p>其他的安裝方式：<a href="https://medium.com/@lefty./itunes-12-7-%E7%A7%BB%E9%99%A4%E4%BA%86-apps-%E7%9A%84%E9%81%B8%E9%A0%85-%E6%88%91%E8%A9%B2%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%9D-ipa-%E6%AA%94%E6%A1%88%E5%88%B0-ios-%E8%A3%9D%E7%BD%AE-2cad1d35d017">iTunes 12.7 移除了 Apps 的選項，我該如何安裝 .ipa 檔案到 iOS 裝置？</a></p>
<h3 id="using-ota">Using OTA</h3>
<p>使用 OTA（Over-the-Air）需要有三個檔案 <code>.ipa(ad-Hoc)</code>、<code>.plist</code>、<code>index.html</code></p>
<p><code>.ipa(ad-Hoc)</code> 需要上傳去雲端空間，目前選擇的雲端空間是 <a href="https://www.dropbox.com">Dropbox</a>。</p>
<p>還需要 <code>Host Website</code> 上傳 <code>.plist</code>、<code>index.html</code>，目前選擇的是 <a href="https://github.com/">GitHub</a>。</p>
<p>所以只要使用 <code>Host Website</code> 就可以安裝了。</p>
<p>參考文章：<a href="https://stackoverflow.com/questions/22658987/error-when-distributing-an-ipa-over-the-air-with-dropbox-ios-7-1/25302392#25302392">Error when distributing an IPA over the air with dropbox - iOS 7.1</a></p>
<h3 id="upload-ipa-to-dropbox-and-get-public-link">Upload .ipa to Dropbox and Get public link</h3>
<ol>
<li>
<p>先把輸出好的 <code>.ipa(ad-Hoc)</code> 上傳至 <a href="https://www.dropbox.com">Dropbox</a> 並且設定分享。</p>
</li>
<li>
<p>將分享網址裡的 <code>www.dropbox.com</code> 替換為 <code>dl.dropboxusercontent.com</code>。</p>
</li>
<li>
<p>紀錄修改 <code>public link</code>。</p>
</li>
</ol>
<h4 id="create-manifestplist">Create manifest.plist</h4>
<pre tabindex="0"><code class="language-plist" data-lang="plist">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt;
&lt;plist version=&#34;1.0&#34;&gt;
&lt;dict&gt;
    &lt;key&gt;items&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;assets&lt;/key&gt;
            &lt;array&gt;
                &lt;dict&gt;
                    &lt;key&gt;kind&lt;/key&gt;
                    &lt;string&gt;software-package&lt;/string&gt;
                    &lt;key&gt;url&lt;/key&gt;
                    &lt;string&gt;http://YOUR_SERVER_URL/YOUR-IPA-FILE.ipa&lt;/string&gt;
                &lt;/dict&gt;
            &lt;/array&gt;
            &lt;key&gt;metadata&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;bundle-identifier&lt;/key&gt;
                &lt;string&gt;com.yourCompany.productName&lt;/string&gt;
                &lt;key&gt;bundle-version&lt;/key&gt;
                &lt;string&gt;1.0.0&lt;/string&gt;
                &lt;key&gt;kind&lt;/key&gt;
                &lt;string&gt;software&lt;/string&gt;
                &lt;key&gt;title&lt;/key&gt;
                &lt;string&gt;YOUR APP NAME&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre><p>修改好 <code>public link</code>、<code>app info</code> 就完成 <code>.plist</code>。</p>
<h4 id="create-indexhtml">Create index.html</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">title</span>&gt;App install&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h2</span>&gt;builds&lt;/<span style="color:#f92672">h2</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;itms-services://?action=download-manifest&amp;url=http://YOUR_SERVER_URL/manifest.plist&#34;</span>&gt; App&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>把 <code>url=http://YOUR_SERVER_URL/manifest.plist</code> 替換成 <code>Website manifest.plist</code>。</p>
<h3 id="hosting-using-github">Hosting using Github</h3>
<ol>
<li>Create a new repository（<a href="https://gitbook.tw/chapters/github/using-github-pages.html">教學文章</a>）</li>
<li>上傳 <code>manifest.plist</code>、<code>index.html</code></li>
</ol>
<p>得到 Github Website <code>index.html</code>就可以安裝 <code>.ipa</code></p>
<h3 id="參考文章">參考文章</h3>
<p><a href="https://medium.com/@lefty./itunes-12-7-%E7%A7%BB%E9%99%A4%E4%BA%86-apps-%E7%9A%84%E9%81%B8%E9%A0%85-%E6%88%91%E8%A9%B2%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%9D-ipa-%E6%AA%94%E6%A1%88%E5%88%B0-ios-%E8%A3%9D%E7%BD%AE-2cad1d35d017">iTunes 12.7 移除了 Apps 的選項，我該如何安裝 .ipa 檔案到 iOS 裝置？</a></p>
<p><a href="https://www.dropbox.com">從網路上下載 ipa 檔並且安裝在 iPhone or iPad(Download and install an ipa from url on iOS)</a></p>
<p><a href="https://stackoverflow.com/questions/22658987/error-when-distributing-an-ipa-over-the-air-with-dropbox-ios-7-1/25302392#25302392">Error when distributing an IPA over the air with dropbox - iOS 7.1</a></p>
<p><a href="https://gitbook.tw/chapters/github/using-github-pages.html">使用 GitHub 免費製作個人網站</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity 5.3 Native System Language</title>
      <link>https://wenrongdev.com/posts/unity-5.3-native-system-language/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-5.3-native-system-language/</guid>
      <description>使用 Unity 取得 Windows、Android、iOS 原生語系。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>在 Unity API 中有 <a href="https://docs.unity3d.com/530/Documentation/ScriptReference/Application-systemLanguage.html">Application.systemLanguage</a> 可以取得系統語言。可是 Unity 5.3 用於 iOS 上，只要是裝置為中文語系一律回傳 SystemLanguage.Chinese，無法判別簡 / 繁語系，因此才研究怎麼取得 Windows、Android、iOS 原生語系。</p>
<h3 id="windows-platform">Windows Platform</h3>
<p>利用 <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnls/nf-winnls-getsystemdefaultlcid">GetSystemDefaultLCID</a> 取得本機端語系，再利用 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.globalization.cultureinfo.getcultureinfo?view=netframework-3.5">CultureInfo.GetCultureInfo</a> 轉化為本機端語系文化。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#a6e22e">[DllImport(&#34;kernel32.dll&#34;)]</span>
</span></span></code></pre></div><p><a href="http://answers.unity.com/answers/1323282/view.html">參考文章</a></p>
<h3 id="android-platform">Android Platform</h3>
<p>直接呼叫原生系統 API 取得。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> CurrentAndroidLanguage()
</span></span><span style="display:flex;"><span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">string</span> result = <span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">using</span> (AndroidJavaClass cls = <span style="color:#66d9ef">new</span> AndroidJavaClass(<span style="color:#e6db74">&#34;java.util.Locale&#34;</span>))
</span></span><span style="display:flex;"><span>     {
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">if</span> (cls != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>         {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">using</span> (AndroidJavaObject locale = cls.CallStatic(<span style="color:#e6db74">&#34;getDefault&#34;</span>))
</span></span><span style="display:flex;"><span>             {
</span></span><span style="display:flex;"><span>                 <span style="color:#66d9ef">if</span> (locale != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>                 {
</span></span><span style="display:flex;"><span>                     result = locale.Call(<span style="color:#e6db74">&#34;getLanguage&#34;</span>) + <span style="color:#e6db74">&#34;_&#34;</span> + locale.Call(<span style="color:#e6db74">&#34;getDefault&#34;</span>);
</span></span><span style="display:flex;"><span>                     Debug.Log(<span style="color:#e6db74">&#34;Android lang: &#34;</span> + result);
</span></span><span style="display:flex;"><span>                 }
</span></span><span style="display:flex;"><span>                 <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>                 {
</span></span><span style="display:flex;"><span>                     Debug.Log(<span style="color:#e6db74">&#34;locale null&#34;</span>);
</span></span><span style="display:flex;"><span>                 }
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>         {
</span></span><span style="display:flex;"><span>             Debug.Log(<span style="color:#e6db74">&#34;cls null&#34;</span>);
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p><a href="https://forum.unity.com/threads/application-systemlanguage.211171/#post-1423369">參考文章</a></p>
<h3 id="ios-platfrom">iOS Platfrom</h3>
<p>製作一個 .mm 文件，內容如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">cStringCopy</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> string)
</span></span><span style="display:flex;"><span> {
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">if</span>(string <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> newString <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)malloc(strlen(string) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>   strcpy(newString, string);
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">return</span> newString;
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">extern</span> <span style="color:#e6db74">&#34;C&#34;</span>
</span></span><span style="display:flex;"><span> {
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> CurIOSLang ()
</span></span><span style="display:flex;"><span>   {
</span></span><span style="display:flex;"><span>     NSArray <span style="color:#f92672">*</span>languages <span style="color:#f92672">=</span> [NSLocale preferredLanguages];
</span></span><span style="display:flex;"><span>     NSString <span style="color:#f92672">*</span>CurrentLanguage <span style="color:#f92672">=</span> [languages objectAtIndex:<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cStringCopy</span>([CurrentLanguage UTF8String]);
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>在 C# 寫出 CurIOSLang 的接口</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#a6e22e">[DllImport(&#34;__Internal&#34;)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">string</span> CurIOSLang();
</span></span></code></pre></div><p>這樣就可以在 Unity 直接呼叫 CurIOSLan 取得 iOS 語系了。</p>
<p><a href="https://blog.csdn.net/teng_ontheway/article/details/50277169">參考文章</a></p>
<hr>
<h3 id="github-repohttpsgithubcomwenrong274nativesystemlanguage"><a href="https://github.com/Wenrong274/NativeSystemLanguage">Github repo</a></h3>
]]></content:encoded>
    </item>
    <item>
      <title>Unity WebGL Template</title>
      <link>https://wenrongdev.com/posts/unity-webgl-template/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-webgl-template/</guid>
      <description>執行 WebGL 時都會有 Unity Logo &amp;amp; Loading。目前此專案修改 Unity Logo 的部分。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>執行 WebGL 時都會有 Unity Logo &amp; Loading。目前此專案修改 Unity Logo 的部分。</p>
<p>需要更詳細的內容可以參考官方文件（<a href="https://docs.unity3d.com/Manual/webgl-templates.html">Unity Document</a>）。</p>
<p>會比較建議使用 <a href="https://assetstore.unity.com/packages/tools/gui/responsive-webgl-template-117308">Responsive WebGL Template</a>，省去自己測試修改的麻煩，不過還是需要改 Logo、Icon 的部分。</p>
<h3 id="setting-up-your-template">Setting Up Your Template</h3>
<ol>
<li>
<p>Import <a href="https://github.com/hybrid274/UnityWebGLTemplate/blob/master/build/release.unitypackage">Unitypackage</a></p>
</li>
<li>
<p>Set up Unity Player Setting
Edit -&gt; Project Settings -&gt; Player, On the WebGL tab -&gt; Resolution and Presentation -&gt; <strong>Selcet LogoTemplates</strong></p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/hybrid274/UnityWebGLTemplate/master/images/logotemplate.jpg" alt="image_1"  />
</p>
</li>
<li>
<p>Change Your Logo</p>
<p>Logo 規格建議不要太大張。</p>
<p>Path: root/Assets/WebGLTemplates/LogoTemplate/<strong>logo.png</strong></p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/hybrid274/UnityWebGLTemplate/master/images/setinglogo.JPG" alt="image_2"  />
</p>
</li>
</ol>
<h3 id="github-repohttpsgithubcomwenrong274unitywebgltemplate"><a href="https://github.com/Wenrong274/UnityWebGLTemplate">GitHub repo</a></h3>
<p><a href="https://ocias.com/blog/how-to-set-up-a-unity-webgl-template/">參考文章</a></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unity WebGL RectMask2D Does Not Work</title>
      <link>https://wenrongdev.com/posts/unity-webgl-rectmask2d-does-not-work/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://wenrongdev.com/posts/unity-webgl-rectmask2d-does-not-work/</guid>
      <description>用於 WebGL RectMask2D 失去作用的簡易修正。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>此 Script 用於 WebGL RectMask2D 失去作用的簡易修正。</p>
<p><code>建議</code>還是先輸出測試確定 RectMask2D 失效再使用此 Script。</p>
<h3 id="使用方式">使用方式</h3>
<p>直接在 Canvas 物件底下 Add Component FixRectMask2dWebGL 即可。</p>
<h3 id="script">Script</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CSharp" data-lang="CSharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FixRectMask2dWebGL</span> : MonoBehaviour
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span><span style="color:#75715e">#if</span> PlatformWebGL
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Awake()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> items = GetComponentsInChildren&lt;MaskableGraphic&gt;(<span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; items.Length; i++)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            Material m = items[i].materialForRendering;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (m != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>                m.EnableKeyword(<span style="color:#e6db74">&#34;UNITY_UI_CLIP_RECT&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
<p><a href="https://forum.unity.com/threads/rectmask2d-does-not-work-when-canvas-render-mode-is-sceen-space-camera-or-world-space-2017-2-0f3.499966/#post-4484971">參考文章</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
