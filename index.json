[{"content":"前言 此篇在講如何使用 Hugo 在 Github 上自架 Blog。\n安裝 Hugo 關於安裝的部分可以參考這些文章\n Quick Start GitHub 部署 Hugo 靜態網站 使用 Hugo 建立靜態網站，並部署在 Github Page  與文章不同的地方主題我是選擇 PaperMod，由於需要設定 config.yml，建議先參考 PaperMod-Installation。\nPaperMod 由於 PaperMod 推薦使用 config.yml，因此推薦把原本的 config.toml 刪除。並且去複製官方提供的 config.yml。\nconfig.yml Search Post 先在 config menu main 新增一個 Search 頁面\nmenu: main: - identifier: archives name: Archives url: /archives/ weight: 5 - identifier: tags name: Tags url: /tags/ weight: 10 - identifier: search name: Search url: /search/ weight: 20 且在最底下此內容。（參考文件）\noutputs: home: - HTML - RSS - JSON # is necessary 最後在專案的 content 底下新增 search.md，即可完成功能。（參考文件）\n--- title: \u0026#34;Search\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # is necessary # url: \u0026#34;/archive\u0026#34; # description: \u0026#34;Description for Search\u0026#34; summary: \u0026#34;search\u0026#34; placeholder: \u0026#34;placeholder text in search input box\u0026#34; --- Comments 此功能是參考 Day 20. Hugo Comments System 文章製作出來的。\nGithub Action 有使用 Custom domain 的話，且 workflows 沒有設定 domain的話，會造成每次更新文章時，都會清掉 Custom domain，變回原本的 github.io。\nGitHub Pages workflow.yml name: GitHub Pages on: push: branches: - main  # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.91.2\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.HUGO_DEPLOY_TOKEN }} PUBLISH_BRANCH: gh-pages # 推送到 gh-pages 分支 commit_message: ${{ github.event.head_commit.message }} publish_dir: ./public cname: wenrongdev.com 只需要新增或替換掉 cname 後面為 domain 即可。\n結論 Hugo 或 PaperMod 我都處於摸索階段。\n這次自己架起來的感覺各方面都不錯，不管是讀取 Blog 速度、支援 Markdown、架設 Github 上且順便保留原始檔，到目前為止沒有明顯的缺點。\n目前最大問題就是 SEO，這是我完全沒有接觸過的。因為目前問題是 Google 搜尋不到我目前的 Blog，之後要接訴處理這部分。\n ","permalink":"https://wenrongdev.com/posts/reflection-blog-3/","summary":"前言 此篇在講如何使用 Hugo 在 Github 上自架 Blog。\n安裝 Hugo 關於安裝的部分可以參考這些文章\n Quick Start GitHub 部署 Hugo 靜態網站 使用 Hugo 建立靜態網站，並部署在 Github Page  與文章不同的地方主題我是選擇 PaperMod，由於需要設定 config.yml，建議先參考 PaperMod-Installation。\nPaperMod 由於 PaperMod 推薦使用 config.yml，因此推薦把原本的 config.toml 刪除。並且去複製官方提供的 config.yml。\nconfig.yml Search Post 先在 config menu main 新增一個 Search 頁面\nmenu: main: - identifier: archives name: Archives url: /archives/ weight: 5 - identifier: tags name: Tags url: /tags/ weight: 10 - identifier: search name: Search url: /search/ weight: 20 且在最底下此內容。（參考文件）","title":"Blog 心得（3）"},{"content":"前言 由於 SiteGround 費用問題，因此我需要把文章轉移至別的地方。不過也知道自己需要哪些功能。\n 免費 Server 網頁速度快 支援程式碼片段 自訂網域  這些是我目前需要的功能，不需要排版、SEO、等功能，最好是直接把 Markdown 語法貼上就能變成文章，剩下就都可以接受了。\nMedium 先說結論 Medium 不適合需要貼上 Code 的技術類文章。\n  貼程式碼片段太麻煩。\n  使用 Markdown 語法撰寫文章，因為格式不同需要重新排版。\n  以上這兩點是使用後遇到的難題，導致我不得不再尋找新的平台。也是這時候才知道自己的 Blog 需要什麼樣的功能。最後在 寫技術部落格不需要那麼大費周章 發現了 CoderBridge，並且申請了 Blog。\nCoderBridge 完整提供 前言 提到所有功能，不過我最後還是選擇使用 Hugo 自架 Blog。\n主因是文章沒有備份檔。\n因為我自己的壞習慣，所以才都沒有留住這些檔案。也因為從 Wordpress、Medium、CoderBridge 換了三個 Blog，覺得搬遷好麻煩，都沒有完整的文章檔案，每次都需要重新排版，才會想架一個免費而且可以保留文章檔案的 Blog。\n最後自己是選擇了使用 Hugo 框架架在 Github page 上。\n結論 Wordpress、Medium、CoderBridge 我覺得各有優缺點，假如自己從一開始就決定要找免費的，我會選擇使用 CoderBridge，不過也因為搬來搬去才知道自己需要哪些功能，最後使用 Hugo 也只是因為我自己覺得很潮而已。\n ","permalink":"https://wenrongdev.com/posts/reflection-blog-2/","summary":"前言 由於 SiteGround 費用問題，因此我需要把文章轉移至別的地方。不過也知道自己需要哪些功能。\n 免費 Server 網頁速度快 支援程式碼片段 自訂網域  這些是我目前需要的功能，不需要排版、SEO、等功能，最好是直接把 Markdown 語法貼上就能變成文章，剩下就都可以接受了。\nMedium 先說結論 Medium 不適合需要貼上 Code 的技術類文章。\n  貼程式碼片段太麻煩。\n  使用 Markdown 語法撰寫文章，因為格式不同需要重新排版。\n  以上這兩點是使用後遇到的難題，導致我不得不再尋找新的平台。也是這時候才知道自己的 Blog 需要什麼樣的功能。最後在 寫技術部落格不需要那麼大費周章 發現了 CoderBridge，並且申請了 Blog。\nCoderBridge 完整提供 前言 提到所有功能，不過我最後還是選擇使用 Hugo 自架 Blog。\n主因是文章沒有備份檔。\n因為我自己的壞習慣，所以才都沒有留住這些檔案。也因為從 Wordpress、Medium、CoderBridge 換了三個 Blog，覺得搬遷好麻煩，都沒有完整的文章檔案，每次都需要重新排版，才會想架一個免費而且可以保留文章檔案的 Blog。\n最後自己是選擇了使用 Hugo 框架架在 Github page 上。\n結論 Wordpress、Medium、CoderBridge 我覺得各有優缺點，假如自己從一開始就決定要找免費的，我會選擇使用 CoderBridge，不過也因為搬來搬去才知道自己需要哪些功能，最後使用 Hugo 也只是因為我自己覺得很潮而已。\n ","title":"Blog 心得（2）"},{"content":"其實我的 Blog 是寫給自己看的。因為我時常忘記怎麼解決問題、怎麼製作功能、忘記是做了什麼蠢事。因此產生這個 Blog 用來記錄我的跌跌撞撞的過程。\n前言 在大學寫程式時遇到問題去 Google 查，很多時候很難下關鍵字，主要是自己犯蠢導致很難知道原因。自然而然也很難對症下藥，很多時候只是重打或參考(?)同學就能解決學生時期遇到的問題。\n當開始工作時的第一年內，遇到的問題基本上還是類似的，因為我實在是太菜了，會遇到一些其實很基本又很無言的低級錯誤，一直重複的犯錯麻煩其他同事幫忙 debug，所以我一直有一個念頭想架設自己的 Blog。記錄解決過程和解決方式，提醒未來自己有錯誤可以來這邊看，假如又可以幫助別人其實也不錯。\nBlogger 第一個 Blog 是使用大學某堂課程用到的 Blogger，其實也沒太認真研究這個 Blog，因為覺得不夠好看用了一下沒有認真的使用。\n多年之後看到 搞笑談軟工 的 Blog，才知道 Blog 的重要的部分其實不是選用什麼架構，持續寫作 才是最重要的核心。\nWordpress 2018 時覺得自己的學習成長曲線變慢了，可能是因為都接觸類似的東西，工作上也大部分內容都能應付，也不會像以前一樣回家繼續寫程式，簡單來講就是發現自己進入了舒適圈(?)。就很坎坷不安，於是就開始買書學習、跟人學習。\n2019 的某天 Unity 程式社群，有人發問推薦的程式書籍，而 阿祥的開發日常 的 Ted 回答了 軟技能代碼之外的生存指南。整本書內容都沒在講程式的部分，大部分內容都是在講工程師除了工作以外的事情，例如運動、投資、面試、等等，推薦沒看過的工程師可以買，對於我個人是獲益良多，也是因為看了才有想認真的自己架設 Blog。\n書的內容其實就有推薦架設屬於自己的 Blog，當時看到就想到我當年的想法，是沒有想要跟作者一樣利用 Blog 賺錢，畢竟技術不到家。倒是覺得可以當一個不錯的作品集，於是就開始在架設自己的 Wordpress。\n當時是看著 教學 文章邊看邊選擇，過程除了刷卡付錢沒有什麼難度，我在 NameCheap 買網址，虛擬主機則是使用 SiteGround。\n使用三年心得 (2019~2020)    年分 SiteGround NameCheap 花費(NTD)     第一年 1493 285 1778   第二年 5375 315 5690   第三年 0 368 368   總花費   7836    第一年 1778 元。而且很多功能可以玩、可以使用，整體使用是很滿意的。而到了第二年，沒有認真確認第一年花費多少就直接續約了，收到扣款通知才知道收費真的很貴。\n第一年跟第二年價格差了 3912 元，當時也沒有想到要退款，想說明年扣款時再來處理。\n到了第三年，就打算不續約 SiteGround，所以開始把文章轉移去 Medium，不過 NameCheap 是有持續付費的，畢竟費用還是較少，而且網址現在還在使用。\n後來用 Hugo 架設這個 Blog，才知道 Wordpress 的好，很多事情都很簡單就完成（SEO、theme、等等）。\n結論 整體而言 Wordpress 對於新手的我架設 Blog，確實是不錯的體驗，只要有錢基本都能處理。不過續約的花費太貴，所以才放棄使用 SiteGround，尋找一些免費的方式。\n當時使用 NameCheap 時也有被盜刷過，記得要綁定 2FA、密碼不要重複。  ","permalink":"https://wenrongdev.com/posts/reflection-blog-1/","summary":"其實我的 Blog 是寫給自己看的。因為我時常忘記怎麼解決問題、怎麼製作功能、忘記是做了什麼蠢事。因此產生這個 Blog 用來記錄我的跌跌撞撞的過程。\n前言 在大學寫程式時遇到問題去 Google 查，很多時候很難下關鍵字，主要是自己犯蠢導致很難知道原因。自然而然也很難對症下藥，很多時候只是重打或參考(?)同學就能解決學生時期遇到的問題。\n當開始工作時的第一年內，遇到的問題基本上還是類似的，因為我實在是太菜了，會遇到一些其實很基本又很無言的低級錯誤，一直重複的犯錯麻煩其他同事幫忙 debug，所以我一直有一個念頭想架設自己的 Blog。記錄解決過程和解決方式，提醒未來自己有錯誤可以來這邊看，假如又可以幫助別人其實也不錯。\nBlogger 第一個 Blog 是使用大學某堂課程用到的 Blogger，其實也沒太認真研究這個 Blog，因為覺得不夠好看用了一下沒有認真的使用。\n多年之後看到 搞笑談軟工 的 Blog，才知道 Blog 的重要的部分其實不是選用什麼架構，持續寫作 才是最重要的核心。\nWordpress 2018 時覺得自己的學習成長曲線變慢了，可能是因為都接觸類似的東西，工作上也大部分內容都能應付，也不會像以前一樣回家繼續寫程式，簡單來講就是發現自己進入了舒適圈(?)。就很坎坷不安，於是就開始買書學習、跟人學習。\n2019 的某天 Unity 程式社群，有人發問推薦的程式書籍，而 阿祥的開發日常 的 Ted 回答了 軟技能代碼之外的生存指南。整本書內容都沒在講程式的部分，大部分內容都是在講工程師除了工作以外的事情，例如運動、投資、面試、等等，推薦沒看過的工程師可以買，對於我個人是獲益良多，也是因為看了才有想認真的自己架設 Blog。\n書的內容其實就有推薦架設屬於自己的 Blog，當時看到就想到我當年的想法，是沒有想要跟作者一樣利用 Blog 賺錢，畢竟技術不到家。倒是覺得可以當一個不錯的作品集，於是就開始在架設自己的 Wordpress。\n當時是看著 教學 文章邊看邊選擇，過程除了刷卡付錢沒有什麼難度，我在 NameCheap 買網址，虛擬主機則是使用 SiteGround。\n使用三年心得 (2019~2020)    年分 SiteGround NameCheap 花費(NTD)     第一年 1493 285 1778   第二年 5375 315 5690   第三年 0 368 368   總花費   7836    第一年 1778 元。而且很多功能可以玩、可以使用，整體使用是很滿意的。而到了第二年，沒有認真確認第一年花費多少就直接續約了，收到扣款通知才知道收費真的很貴。","title":"Blog 心得（1）"},{"content":"前言 此專案為 Unity math quiz，是基於 Tutorial 2: Create a timed math quiz 文件改寫出來的專案。\nGithub  ","permalink":"https://wenrongdev.com/posts/unity-mathquiz/","summary":"此專案為 Unity math quiz，是基於 Tutorial 2 Create a timed math quiz 文件改寫出來的專案。","title":"Unity MathQuiz"},{"content":"前言 使用方式 預設日期為當天日期。\n可以直接使用 UnityCalendar.GetDate() 取得使用者設定日期，假如有錯誤會回報錯誤。\ntestGetDate.cs\npublic void OnClick_GetDate() { DateTime dt = unityCalendar.GetDate(); text.text = dt.ToString(\u0026#34;yyyy-MM-dd\u0026#34;); } public void OnClick_Clear() { text.text = string.Empty; unityCalendar.Init(); } Github  ","permalink":"https://wenrongdev.com/posts/unity-calendar/","summary":"Unity 實做日曆功能。","title":"Unity Calendar"},{"content":"前言 主要是實作 Addressable hotfix 的寫法。\n基本 Unity-Addressable 安裝及 Remote 設定可以參考這篇 Unity筆記 Addressable Asset System。\n詳細解說可以參考\nUnity Addressables 深入浅出(一)、(二)、(三)\nUnity Addressable 獨立資源包\n實例 Initialization Initial Addressable System 是必要的假如不初始化會造成一些使用上的問題。\n在 Start 上可直接初始化 Addressable System\nIEnumerator Start() { var InitAddressablesAsync = Addressables.InitializeAsync(); yield return InitAddressablesAsync; } Update Catalog Catalog 是所有檔案的紀錄檔(log)，不更新 Catalog 也是能下載 Asset，可是會造成無法 hotfix，所以需要再下載前更一次 Catalog。\nCatalog Path 依 Window 為例，Catalog 更新後會放自動放置在\nC:\\Users\\[PC Name]\\AppData\\LocalLow\\[Company Name]\\[Product Name]\\com.unity.addressables\n   名稱 解釋     [PC Name] 系統使用者名稱   [Company Name] Unity 專案 Company Name   [Product Name] Unity 專案 Product Name    IEnumerator UpdateCatalogCoro() { List\u0026lt;string\u0026gt; catalogsToUpdate = new List\u0026lt;string\u0026gt;(); var checkCatalogHandle = Addressables.CheckForCatalogUpdates(); yield return checkCatalogHandle; if (checkCatalogHandle.Status == AsyncOperationStatus.Succeeded) catalogsToUpdate = checkCatalogHandle.Result; if (catalogsToUpdate.Count \u0026gt; 0) { var updateCatalogHandle = Addressables.UpdateCatalogs(catalogsToUpdate, false); yield return updateCatalogHandle; } } Update Asset 下載好的 Asset，在測試時不清除是會造成無法測試下載流程，可是可以手動清除下載 Asset。\nAsset Path 依 Window 為例，下載好的 Asset 更新後會放自動放置在\nC:\\Users\\[PC Name]\\AppData\\LocalLow\\Unity\\[Company Name]_[Product Name]\n   名稱 解釋     [PC Name] 系統使用者名稱   [Company Name] Unity 專案 Company Name   [Product Name] Unity 專案 Product Name    Update All Asset 這個方式是使用 AA 系統紀錄 Catalog 取得出來的位置（Locator），在使用 GetDownloadSizeAsync 來確認檔案有無更新，來達成更新所有檔案。\nIEnumerator UpdateAllGroupsCoro() { foreach (var loc in Addressables.ResourceLocators) { foreach (var key in loc.Keys) { var sizeAsync = Addressables.GetDownloadSizeAsync(key); yield return sizeAsync; long totalDownloadSize = sizeAsync.Result; if (sizeAsync.Result \u0026gt; 0) { var downloadAsync = Addressables.DownloadDependenciesAsync(key); while (!downloadAsync.IsDone) { float percent = downloadAsync.PercentComplete; Debug.Log($\u0026#34;{key} = percent {(int)(totalDownloadSize * percent)}/{totalDownloadSize}\u0026#34;); yield return new WaitForEndOfFrame(); } Addressables.Release(downloadAsync); } Addressables.Release(sizeAsync); } } } Update label Asset 這個方式是使用 Label 下載特定資源。\nIEnumerator UpdateLabelAsset(string label) { long updateLabelSize = 0; var async = Addressables.GetDownloadSizeAsync(label); yield return async; if (async.Status == AsyncOperationStatus.Succeeded) updateLabelSize = async.Result; Addressables.Release(async); if (updateLabelSize == 0) { Debug.Log($\u0026#34;{label} last version\u0026#34;); yield break; } yield return DownloadLabelAsset(label); } IEnumerator DownloadLabelAsset(string label) { var downloadAsync = Addressables.DownloadDependenciesAsync(label, false); while (!downloadAsync.IsDone) { float percent = downloadAsync.PercentComplete; Debug.Log($\u0026#34;{label}: {downloadAsync.PercentComplete * 100} %\u0026#34;); yield return new WaitForEndOfFrame(); } Addressables.Release(downloadAsync); Debug.Log($\u0026#34;{label} UpdateAssets finish\u0026#34;); } Clear Asset 刪除 Asset Path 路徑下載的檔案。\nClear All Asset Caching.ClearCache() 是能夠完整的清除下載的所有檔案，但是不能單獨使用，還要搭配 Addressables.ClearDependencyCacheAsync 才能清除 Catalog 紀錄的下載資訊。\nIEnumerator ClearAllAssetCoro() { foreach (var locats in Addressables.ResourceLocators) { var async = Addressables.ClearDependencyCacheAsync(locats.Keys, false); yield return async; Addressables.Release(async); } Caching.ClearCache(); } Clear Label Asset IEnumerator ClearAssetCoro(string label) { var async = Addressables.LoadResourceLocationsAsync(label); yield return async; var locats = async.Result; foreach (var locat in locats) Addressables.ClearDependencyCacheAsync(locat.PrimaryKey); } Github 小結 write something cool\u0026hellip;\n參考連結  ","permalink":"https://wenrongdev.com/posts/unity-addressable/","summary":"主要是實作 Addressable hotfix 的寫法。","title":"Unity Addressable"},{"content":"GitHub  ","permalink":"https://wenrongdev.com/posts/unity-particlepath/","summary":"Unity 實作粒子路徑系統。","title":"Unity ParticlePath"},{"content":"前言 Unity 調整 Android、iOS 系統亮度功能。\n使用方式 Dimmer.SetBrightness.DoAction(value); Github 參考連結 UnityからiOS\u0026amp;Androidの画面輝度をMAXにする方法\n ","permalink":"https://wenrongdev.com/posts/unity-dimmer/","summary":"Unity 調整 Android、iOS 系統亮度功能。","title":"Unity Dimmer"},{"content":"前言 在 UnityEngine.UI.Text 增加 TextSpacing，且調整 TextSpacing 的 Spacing 調整文字間格。\nScripts using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; [AddComponentMenu(\u0026#34;UI/Effects/TextSpacing\u0026#34;)] public class TextSpacing : BaseMeshEffect { #region Struct  public enum HorizontalAligmentType { Left, Center, Right } public class Line { // 起點索引  public int StartVertexIndex { get { return _startVertexIndex; } } private int _startVertexIndex = 0; // 終點索引  public int EndVertexIndex { get { return _endVertexIndex; } } private int _endVertexIndex = 0; // 該行佔的點數目  public int VertexCount { get { return _vertexCount; } } private int _vertexCount = 0; public Line(int startVertexIndex, int length) { _startVertexIndex = startVertexIndex; _endVertexIndex = length * 6 - 1 + startVertexIndex; _vertexCount = length * 6; } } #endregion  public float Spacing = 1f; public override void ModifyMesh(VertexHelper vh) { if (!IsActive() || vh.currentVertCount == 0) { return; } var text = GetComponent\u0026lt;Text\u0026gt;(); if (text == null) { Debug.LogError(\u0026#34;Missing Text component\u0026#34;); return; } // 水平對齊方式  HorizontalAligmentType alignment; if (text.alignment == TextAnchor.LowerLeft || text.alignment == TextAnchor.MiddleLeft || text.alignment == TextAnchor.UpperLeft) { alignment = HorizontalAligmentType.Left; } else if (text.alignment == TextAnchor.LowerCenter || text.alignment == TextAnchor.MiddleCenter || text.alignment == TextAnchor.UpperCenter) { alignment = HorizontalAligmentType.Center; } else { alignment = HorizontalAligmentType.Right; } var vertexs = new List\u0026lt;UIVertex\u0026gt;(); vh.GetUIVertexStream(vertexs); // var indexCount = vh.currentIndexCount;  var lineTexts = text.text.Split(\u0026#39;\\n\u0026#39;); var lines = new Line[lineTexts.Length]; // 根據lines數組中各個元素的長度計算每一行中第一個點的索引，每個字、字母、空母均佔6個點  for (var i = 0; i \u0026lt; lines.Length; i++) { // 除最後一行外，vertexs對於前面幾行都有回車符佔了6個點  if (i == 0) { lines[i] = new Line(0, lineTexts[i].Length + 1); } else if (i \u0026gt; 0 \u0026amp;\u0026amp; i \u0026lt; lines.Length - 1) { lines[i] = new Line(lines[i - 1].EndVertexIndex + 1, lineTexts[i].Length + 1); } else { lines[i] = new Line(lines[i - 1].EndVertexIndex + 1, lineTexts[i].Length); } } UIVertex vt; for (var i = 0; i \u0026lt; lines.Length; i++) { for (var j = lines[i].StartVertexIndex; j \u0026lt;= lines[i].EndVertexIndex; j++) { if (j \u0026lt; 0 || j \u0026gt;= vertexs.Count) { continue; } vt = vertexs[j]; var charCount = lines[i].EndVertexIndex - lines[i].StartVertexIndex; if (i == lines.Length - 1) { charCount += 6; } if (alignment == HorizontalAligmentType.Left) { vt.position += new Vector3(Spacing * ((j - lines[i].StartVertexIndex) / 6), 0, 0); } else if (alignment == HorizontalAligmentType.Right) { vt.position += new Vector3(Spacing * (-(charCount - j + lines[i].StartVertexIndex) / 6 + 1), 0, 0); } else if (alignment == HorizontalAligmentType.Center) { var offset = (charCount / 6) % 2 == 0 ? 0.5f : 0f; vt.position += new Vector3(Spacing * ((j - lines[i].StartVertexIndex) / 6 - charCount / 12 + offset), 0, 0); } vertexs[j] = vt; // 以下注意點與索引的對應關係  if (j % 6 \u0026lt;= 2) { vh.SetUIVertex(vt, (j / 6) * 4 + j % 6); } if (j % 6 == 4) { vh.SetUIVertex(vt, (j / 6) * 4 + j % 6 - 1); } } } } } 問題 無法自由換行\n參考連結 UGUI中Text的字间距\nUGUI中随意调整Text中的字体间距\n ","permalink":"https://wenrongdev.com/posts/add-text-spacing-for-unity/","summary":"在 UnityEngine.UI.Text 增加 TextSpacing，且調整 TextSpacing 的 Spacing 調整文字間格。","title":"Add Text Spacing for Unity"},{"content":"前言 主要是用來測試虛擬搖桿功能。\n使用 Joystick Pack 支援各輸入端接口偛件。\nTutorial Github   ","permalink":"https://wenrongdev.com/posts/mobile-joystick/","summary":"主要是用來測試 Unity 虛擬搖桿功能。","title":"Mobile Joystick"},{"content":"前言 視覺化管理使用路徑，不過目前功能還是很粗糙。\nFeature 視覺化管理\nUsage Create path 之後會在 Assets\\FolderManager\\StreamingAssets\\FolderManager.asset 出現 asset。\nAsset 即是FolderManager.Folders，因此可以直接宣告此 class 使用。\nGithub  ","permalink":"https://wenrongdev.com/posts/folder-manager/","summary":"Unity 視覺化管理使用路徑。","title":"Folder Manager"},{"content":"前言 Unity 在 WebGL 時存/讀檔案的方式，檔案是放在 IndexedDB。\nIndexedDB 是有容量大小限制，所以需要注意存儲的檔案大小。\nAbout IndexedDB Working with quota on mobile browsers\nGitHub Introduction   File Path\nstring.Format(\u0026quot;{0}/{1}.dat\u0026quot;, Application.persistentDataPath, FileName);\n  Save Method\nDataAccess.Save(fileName, bytes);\n  Load Method\nbyte[] bytes = DataAccess.Load(fileName);\n  Example Scene\nroot\\Assets\\WebGL\\Example\\Scenes\\Example\n   ","permalink":"https://wenrongdev.com/posts/data-access-webgl/","summary":"Unity 在 WebGL 時存/讀檔案的方式，檔案是放在 IndexedDB。是有容量大小限制，所以需要注意存儲的檔案大小。","title":"Data Access WebGL"},{"content":"前言 此為使用 Jenkins 輸出 Unity 專案注意事項。\nSetting 須注意 Unity 有無安裝輸出目標平台（Android、iOS、WebGL\u0026hellip;）。\n並且要設定 Jenkins 環境（AndroidSDK、JDK、Unity Editor）。\nJenkins Android SDK 需要新增 Jenkins 環境變數（Environment variable），來設定 Android SDK 路徑。\nJenkins 頁面路徑為 Manage Jenkins -\u0026gt; Configure System -\u0026gt; Global properties。\n設定如下圖：\nName：ANDROID_HOME\nValue：AndroidSDK 路徑。\nJenkins JDK JDK 版本請選 Java SE 8，因為 Unity 只支援 Java SE 8。\nJenkins 頁面路徑為 Manage Jenkins -\u0026gt; Global Tool Configuration -\u0026gt; JDK。\nJenkins Unity3d Plugin 需要至 Plugin Manager 安裝 Unity3d Plugin。\nJenkins 頁面路徑為 Manage Jenkins -\u0026gt; Plugin Manager -\u0026gt; Available\n安裝完成後，需要設定 Unity Editor 路徑。\nName：unity version\nInstallation directory：unity installed path\nJenkins item 基本設置可參考 使用jenkins建置unity3d專案 介紹。\n最主要是設定 Editor command line arguments。\n頁面路徑：Configure -\u0026gt; General -\u0026gt; Build\n點選 Add build step -\u0026gt; invoke Unity3d Editor，選擇對應的 Unity 編輯器版本。\n在 Editor command line arguments 輸入\n-projectPath \u0026#34;$WORKSPACE/\u0026#34; -executeMethod JenkinsBuild.BuildPlatforms -buildPath \u0026#34;$WORKSPACE\\Builds\u0026#34; -android -batchmode -nographics -quit -buildPath \u0026quot;$WORKSPACE\\Builds\u0026quot; \u0026ldquo;$WORKSPACE\\Builds 輸出放置資料夾路徑。\n-android 為輸出平台，可改為 -windows32、-windows64、-linux64、-macos、-android、-ios、-webgl。\nGitHub Repo reference 使用jenkins建置unity3d專案\nJenkins for Unity with DigitalOcean\n ","permalink":"https://wenrongdev.com/posts/unity-jenkins-build/","summary":"此為使用 Jenkins 輸出 Unity 專案注意事項。","title":"Unity Jenkins Build"},{"content":"前言 測試 LinkImageText 應用。\n主要內容 使用 QuickSheet 當資料庫，讓 FancyScrollView 顯示資料庫名字。\n點擊 FancyScrollView button 會在 HypeLinkText 顯示 name。\n點擊 HypeLinkText 超連結文字，會顯示超連結內容。\nGitHub repo  ","permalink":"https://wenrongdev.com/posts/hyperlinks-in-unity-text/","summary":"Unity uGUI Text support insert link and image。","title":"Hyperlinks in Unity Text"},{"content":"前言 前陣子因為專案需要後台推播功能，所以開始測試 FCM(Firebase Cloud Messaging）功能。\n測試的過程一直沒辦法在 APP 不活躍或不喚醒（not active）狀態推送推播訊息。\n後來發現主因是省電模式（Doze mode）導致 APP 無法接受任何推波內容。\n參考連結 https://developer.android.com/training/monitoring-device-state/doze-standby?hl=zh_cn\nhttps://blog.csdn.net/pkorochi/article/details/87186659\n ","permalink":"https://wenrongdev.com/posts/fcm-notifications-not-received-on-android/","summary":"沒辦法在 APP 不活躍或不喚醒（not active）狀態推送推播訊息解決方式。","title":"FCM Notifications Not Received on Android"},{"content":"前言 在 Android 9.0 中使用 WebReqesut 時，URL 是需要用 Https 才能正常使用，不然 Response 都是 Error。（Google Doc）\nError Log：Cleartext HTTP traffic to 45.xx.xxx.xx not permitted\nSolution 在 AndroidManifest.xml 的 application 加入 android:usesCleartextTraffic=\u0026quot;true\u0026quot;。\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;manifest ...\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.INTERNET\u0026#34; /\u0026gt; \u0026lt;application ... android:usesCleartextTraffic=\u0026#34;true\u0026#34; ...\u0026gt; ... \u0026lt;/application\u0026gt; \u0026lt;/manifest\u0026gt; 參考連結 Android中HTTP网络请求相关问题\n ","permalink":"https://wenrongdev.com/posts/android-p-http-error/","summary":"在 Android 9.0 中使用 WebReqesut 時，URL 是需要用 Https 才能正常使用，不然 Response 都是 Error。","title":"Android P HTTP Error"},{"content":"前言 主要用來 Unity app A 如何傳遞資訊給 Unity app B。\nDemo Script private class PropertyInfo { public string elementA = string.Empty; public string elementB = string.Empty; public string elementC = string.Empty; } public void Launch(string bundleId, string storelink) { bool fail = false; AndroidJavaClass up = new AndroidJavaClass(\u0026#34;com.unity3d.player.UnityPlayer\u0026#34;); AndroidJavaObject ca = up.GetStatic\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;currentActivity\u0026#34;); AndroidJavaObject packageManager = ca.Call\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;getPackageManager\u0026#34;); AndroidJavaObject launchIntent = null; try { launchIntent = packageManager.Call\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;getLaunchIntentForPackage\u0026#34;, bundleId); } catch (Exception e) { fail = true; } if (fail || launchIntent == null) Application.OpenURL(storelink); else { launchIntent.Call\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;putExtra\u0026#34;, \u0026#34;elementA\u0026#34;, LaunchData.elementA); launchIntent.Call\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;putExtra\u0026#34;, \u0026#34;elementB\u0026#34;, LaunchData.elementB); launchIntent.Call\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;putExtra\u0026#34;, \u0026#34;elementC\u0026#34;, LaunchData.elementC); ca.Call(\u0026#34;startActivity\u0026#34;, launchIntent); } up.Dispose(); ca.Dispose(); packageManager.Dispose(); launchIntent.Dispose(); } Property PropertyInfo 是用來接受資訊的 class，這邊可以自行修改。\n Get Android intent Data for Unity\n","permalink":"https://wenrongdev.com/posts/launch-from-within-a-unity-app-another-unity-app-android/","summary":"主要用來 Unity app A 如何傳遞資訊給 Unity app B。","title":"Launch From Within a Unity App Another Unity App Android"},{"content":"前言 主要用來 A App 呼叫 B App 時，B App 該如何接受資料。\n而 B App 是使用 Unity 接收。\nDemo Script private class PropertyInfo { public string elementA = string.Empty; public string elementB = string.Empty; public string elementC = string.Empty; } public class ExternalCall : MonoBehaviour { PropertyInfo info = new PropertyInfo(); private void Awake() { #if (!UNITY_EDITOR \u0026amp;\u0026amp; UNITY_ANDROID)  CreatePushClass(new AndroidJavaClass(\u0026#34;com.unity3d.player.UnityPlayer\u0026#34;)); #endif  } public void CreatePushClass(AndroidJavaClass UnityPlayer) { #if UNITY_ANDROID  AndroidJavaObject currentActivity = UnityPlayer.GetStatic\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;currentActivity\u0026#34;); AndroidJavaObject intent = currentActivity.Call\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;getIntent\u0026#34;); bool elementA_hasExtra = IsBool(intent, \u0026#34;elementA\u0026#34;); bool elementB_hasExtra = IsBool(intent, \u0026#34;elementB\u0026#34;); bool elementC_hasExtra = IsBool(intent, \u0026#34;elementC\u0026#34;); AndroidJavaObject extras = GetExtras(intent); if (extras != null) { if (elementA_hasExtra) info.elementA = GetProperty(extras, \u0026#34;elementA\u0026#34;); if (elementB_hasExtra) info.elementB = GetProperty(extras, \u0026#34;elementB\u0026#34;); if (elementC_hasExtra) info.elementC = GetProperty(extras, \u0026#34;elementC\u0026#34;); } #endif  } private bool IsBool(AndroidJavaObject intent, string method) { bool b = false; try { b = intent.Call\u0026lt;bool\u0026gt;(\u0026#34;hasExtra\u0026#34;, method); } catch (Exception e) { Debug.Log(e.Message); } return b; } private AndroidJavaObject GetExtras(AndroidJavaObject intent) { AndroidJavaObject extras = null; try { extras = intent.Call\u0026lt;AndroidJavaObject\u0026gt;(\u0026#34;getExtras\u0026#34;); } catch (Exception e) { Debug.Log(e.Message); } return extras; } private string GetProperty(AndroidJavaObject extras, string name) { string s = string.Empty; try { s = extras.Call\u0026lt;string\u0026gt;(\u0026#34;getString\u0026#34;, name); } catch (Exception e) { Debug.Log(e.Message); } return s; } } Property PropertyInfo 是用來接受資訊的 class，這邊可以自行修改。\n Launch from within a Unity app another Unity app(Android)\n","permalink":"https://wenrongdev.com/posts/get-android-intent-data-for-unity/","summary":"主要用來 A App 呼叫 B App 時，B App 該如何接受資料。而 B App 是使用 \u003ccode\u003eUnity\u003c/code\u003e 接收。","title":"Get Android Intent Data for Unity"},{"content":"Install 去官網下載 Inno Setup，請下載 Stable Release 版本。\nAdd Language  下載官方提供的 Github，直接下載 Releases 版本，完成後解壓縮。 複製 root/Files/Languages 資料夾，貼上並且覆蓋 Inno Setup 安裝資料夾。  使用方式 可以參考以下腳本，也可以自己寫，不知道寫法可以參考官方文件。\n#define MyAppGUID \u0026quot;{{D0D7EBDD-2493-4086-A306-AB012D2AFA93}\u0026quot; #define MyAppName \u0026quot;Examle\u0026quot; #define MyAppFolder \u0026quot;ExampleFolder\u0026quot; #define MyAppSetupExeName \u0026quot;Examle\u0026quot; #define MyAppExeName \u0026quot;Examle.exe\u0026quot; #define MyAppURL \u0026quot;https://wenrongdev.com/\u0026quot; #define MyAppPublisher \u0026quot;wen rong studio\u0026quot; [Setup] AppId={#MyAppGUID} AppName={#MyAppName} AppVersion=0.1.0 AppVerName={#MyAppName} AppPublisher = {#MyAppPublisher} AppPublisherURL = {#MyAppURL} AppSupportURL = {#MyAppURL} AppUpdatesURL = {#MyAppURL} Compression = lzma2 DefaultDirName={commonpf32}\\{#MyAppFolder} DisableProgramGroupPage=yes DefaultGroupName={#MyAppName} UninstallDisplayIcon={app}ForwardSlash{#MyAppExeName} SolidCompression = no OutputDir = \u0026quot;Setup\u0026quot; OutputBaseFilename = {#MyAppSetupExeName} ShowLanguageDialog=yes // 是否需要分割 DiskSpanning=yes SlicesPerDisk=3 DiskSliceSize=1566000000 /// [Languages] Name: EN; MessagesFile: \u0026quot;compiler:Default.isl\u0026quot; Name: CT; MessagesFile: \u0026quot;compiler:Languages\\Unofficial\\ChineseTraditional.isl\u0026quot; Name: CS; MessagesFile: \u0026quot;compiler:Languages\\Unofficial\\ChineseSimplified.isl\u0026quot; Name: JP; MessagesFile: \u0026quot;compiler:Languages\\Japanese.isl\u0026quot; [CustomMessages] MyAppName = {#MyAppName} MyAppVerName = {#MyAppName} %1 [Messages] BeveledLabel = {#MyAppURL} [Dirs] Name: \u0026quot;{app}\u0026quot;; Permissions: everyone-full [Files] Source: \u0026quot;{#MyAppFolder}\\*\u0026quot;; DestDir: \u0026quot;{app}\\{#MyAppFolder}\u0026quot;; Flags: ignoreversion recursesubdirs [Icons] Name: \u0026quot;{userdesktop}\\{cm:MyAppName}\u0026quot;; Filename: \u0026quot;{app}\\{#MyAppFolder}\\{#MyAppExeName}\u0026quot;; [Code] function GetNumber(var temp: String): Integer; var part: String; pos1: Integer; begin if Length(temp) = 0 then begin Result := -1; Exit; end; pos1 := Pos('.', temp); if (pos1 = 0) then begin Result := StrToInt(temp); temp := ''; end else begin part := Copy(temp, 1, pos1 - 1); temp := Copy(temp, pos1 + 1, Length(temp)); Result := StrToInt(part); end; end; function CompareInner(var temp1, temp2: String): Integer; var num1, num2: Integer; begin num1 := GetNumber(temp1); num2 := GetNumber(temp2); if (num1 = -1) or (num2 = -1) then begin Result := 0; Exit; end; if (num1 \u0026gt; num2) then begin Result := 1; end else if (num1 \u0026lt; num2) then begin Result := -1; end else begin Result := CompareInner(temp1, temp2); end; end; function CompareVersion(str1, str2: String): Integer; var temp1, temp2: String; begin temp1 := str1; temp2 := str2; Result := CompareInner(temp1, temp2); end; function InitializeSetup(): Boolean; var oldVersion: String; uninstaller: String; ErrorCode: Integer; vCurID :String; vCurAppName :String; begin vCurID:= '{#SetupSetting(\u0026quot;AppId\u0026quot;)}'; vCurAppName:= '{#SetupSetting(\u0026quot;AppName\u0026quot;)}'; vCurID:= Copy(vCurID, 2, Length(vCurID) - 1); if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\' + vCurID + '_is1') then begin RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\' + vCurID + '_is1', 'DisplayVersion', oldVersion); if (CompareVersion(oldVersion, '{#SetupSetting(\u0026quot;AppVersion\u0026quot;)}') \u0026lt; 0) then begin if MsgBox('Version ' + oldVersion + ' of ' + vCurAppName + ' is already installed. Continue to use this old version?', mbConfirmation, MB_YESNO) = IDYES then begin Result := False; end else begin RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\' + vCurID + '_is1', 'UninstallString', uninstaller); ShellExec('runas', uninstaller, '/SILENT', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode); Result := True; end; end else begin MsgBox('Version ' + oldVersion + ' of ' + vCurAppName + ' is already installed. This installer will exit.', mbInformation, MB_OK); Result := False; end; end else begin Result := True; end; end; 修改方式 假如是使用複製舊有的 .iss 檔，只需要修改幾個需要注意的文字即可。\n正常的資料夾結構\n   Folder Description     ExampleFolder 打包前的資料夾   Setup Inno Setup 輸出的資料夾   .iss Inno Setup Script    修改 .iss #define MyAppGUID \u0026quot;GUID\u0026quot; #define MyAppName \u0026quot;Examle\u0026quot; #define MyAppFolder \u0026quot;ExampleFolder\u0026quot; #define MyAppSetupExeName \u0026quot;Examle\u0026quot; #define MyAppExeName \u0026quot;Examle.exe\u0026quot; #define MyAppURL \u0026quot;https://wenrongdev.com/\u0026quot; #define MyAppPublisher \u0026quot;wen rong studio\u0026quot; 需修改地方    Arg Description     MyAppGUID 安裝系統 GUID，產生方式為 Tools/Generated GUID。   MyAppName 桌面路徑名稱 。   MyAppFolder 安裝目錄名稱。   MyAppSetupExeName Inno Setup 輸出安裝檔名稱 。    取得 GUID 方法 Github  ","permalink":"https://wenrongdev.com/posts/example-inno-setup/","summary":"簡易使用 Inno Setup 打包教學。","title":"Example Inno Setup"},{"content":"前言 因為某些程式開啟時，會跳出需要系統管理員（Administrator）權限執行程式，也導致了只要是ㄧ般使用者每次開啟時都需要輸入系統管理員密碼來執行。為了ㄧ般使用者的權限問題也不能關閉 Windows UAC。 也不可能修改一般使用者的權限，所以需要讓 Windows UAC 加入此程式為白名單，這樣就不會每次都會跳出權限要求。\n已知限制條件  程式必須以 Administrator 執行 一般使用者可以執行 不可完全關閉 Windows UAC  解決方式 根據不變更UAC安全性，但執行程式時又不擾民的設定方式，可以在 Windows Regedit 新增白名單。\n Win+R 輸入 regedit 執行 根據此路徑尋找 HKEY_CURRENT_USERS\\Software\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers 右鍵新增字串值，名稱為程式（exe）路徑、資料為~ RunAsInvoker  C# 解決方式 public class RegEditWhiteList { public string keyName { get; set; } private readonly string root = @\u0026#34;Software\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers\u0026#34;; private readonly string keyValue = \u0026#34;~ RunAsInvoker\u0026#34;; public RegEditWhiteList(string keyName) { this.keyName = keyName; } public void SendRegedit() { RegistryKey key = Registry.CurrentUser.OpenSubKey(root, true); key.SetValue(keyName, keyValue,RegistryValueKind.String); key.Close(); } } GitHub 使用方式 因為修改註冊碼是修正當前使用者的註冊碼，因此只要換使用者就需要再新增一次白名單。\n參考資料 不變更UAC安全性，但執行程式時又不擾民的設定方式\n ","permalink":"https://wenrongdev.com/posts/whitelist-for-windows-uac/","summary":"為了ㄧ般使用者的權限問題也不能關閉 Windows UAC。 也不可能修改一般使用者的權限，所以需要讓 Windows UAC 加入此程式為白名單，這樣就不會每次都會跳出權限要求。","title":"Whitelist for Windows UAC"},{"content":"前言  Unity 2019.2.11f1 Vuforia 8.5.9  iOS Build and Run Error ld: library not found for -liPhone-lib clang: error: linker command failed with exit code 1 (use -v to see invocation) Solution - iOS Build and Run Error Build Setting -\u0026gt; Search Paths -\u0026gt; Library Search Paths\n移除 \u0026quot;$(SECROOT)\u0026quot; 參數\niOS Archive Error ld: warning: ignoring file ... building for iOS-armv7 but attempting to link with file built for iOS-arm64. Solution - iOS Archive Error 根據 Vuforia Engine Release Notes 在 v8.1.7之後不支援 32-bit，並且最低支援 iOS 11，因此需要把專案版本最低版本設定為 iOS。\n  設定 iOS architectures\nBuild Setting -\u0026gt; Architectures -\u0026gt; Architectures\nArchitectures 改為 Standard architectures\n  設定 iOS 版本\nBuild Setting -\u0026gt; Deployment -\u0026gt; iOS Deployment Target\niOS Deployment Target 改為 iOS 11.0\n  iOS Distribution Error ERROR ITMS-90534 Solution - iOS Distribution Error 請使用 Xcode 11.2.1 輸出，即可修正。\n參考文章 Unity Xcode Error \u0026ldquo;library not found for -\u0026rdquo; の解決方法\nCan\u0026rsquo;t submit apps to AppStore: ERROR ITMS-90534: \u0026ldquo;Invalid Toolchain\n ","permalink":"https://wenrongdev.com/posts/ios-build-note-for-unity-2019-vuforia/","summary":"Vuforia iOS Build and Run Error。","title":"IOS Build Note for Unity 2019 Vuforia"},{"content":"前言 由於 iTunes 12.6 之後不提供 .ipa 檔安裝，導致無法提供測試 App，所以有人研究出很多安裝方式。不過這邊主要是介紹 OTA 的方式。\n其他的安裝方式：iTunes 12.7 移除了 Apps 的選項，我該如何安裝 .ipa 檔案到 iOS 裝置？\nUsing OTA 使用 OTA（Over-the-Air）需要有三個檔案 .ipa(ad-Hoc)、.plist、index.html\n.ipa(ad-Hoc) 需要上傳去雲端空間，目前選擇的雲端空間是 Dropbox。\n還需要 Host Website 上傳 .plist、index.html，目前選擇的是 GitHub。\n所以只要使用 Host Website 就可以安裝了。\n參考文章：Error when distributing an IPA over the air with dropbox - iOS 7.1\nUpload .ipa to Dropbox and Get public link   先把輸出好的 .ipa(ad-Hoc) 上傳至 Dropbox 並且設定分享。\n  將分享網址裡的 www.dropbox.com 替換為 dl.dropboxusercontent.com。\n  紀錄修改 public link。\n  Create manifest.plist \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026quot;-//Apple//DTD PLIST 1.0//EN\u0026quot; \u0026quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026quot;\u0026gt; \u0026lt;plist version=\u0026quot;1.0\u0026quot;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;items\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;assets\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;kind\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;software-package\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;url\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;http://YOUR_SERVER_URL/YOUR-IPA-FILE.ipa\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;metadata\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;bundle-identifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.yourCompany.productName\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;bundle-version\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;1.0.0\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;kind\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;software\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;title\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;YOUR APP NAME\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 修改好 public link、app info 就完成 .plist。\nCreate index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;App install\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;builds\u0026lt;/h2\u0026gt; \u0026lt;a href=\u0026#34;itms-services://?action=download-manifest\u0026amp;url=http://YOUR_SERVER_URL/manifest.plist\u0026#34;\u0026gt; App\u0026lt;/a\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 把 url=http://YOUR_SERVER_URL/manifest.plist 替換成 Website manifest.plist。\nHosting using Github  Create a new repository（教學文章） 上傳 manifest.plist、index.html  得到 Github Website index.html就可以安裝 .ipa\n參考文章 iTunes 12.7 移除了 Apps 的選項，我該如何安裝 .ipa 檔案到 iOS 裝置？\n從網路上下載ipa檔並且安裝在iPhone or iPad(Download and install an ipa from url on iOS)\nError when distributing an IPA over the air with dropbox - iOS 7.1\n使用 GitHub 免費製作個人網站\n ","permalink":"https://wenrongdev.com/posts/install-ipa-with-ota/","summary":"由於 iTunes 12.6 之後不提供 .ipa 檔安裝，導致無法提供測試 App，所以有人研究出很多安裝方式。不過這邊主要是介紹 OTA 的方式。","title":"Install IPA With OTA"},{"content":"前言 在 Unity API 中有 Application.systemLanguage 可以取得系統語言。可是 Unity 5.3 用於 iOS 上，只要是裝置為中文語系一律回傳 SystemLanguage.Chinese，無法判別簡 / 繁語系，因此才研究怎麼取得 Windows、Android、iOS 原生語系。\nWindows Platform 利用 GetSystemDefaultLCID 取得本機端語系，再利用 CultureInfo.GetCultureInfo 轉化為本機端語系文化。\n[DllImport(\u0026#34;kernel32.dll\u0026#34;)] 參考文章\nAndroid Platform 直接呼叫原生系統 API 取得。\nprivate static string CurrentAndroidLanguage() { string result = \u0026#34;\u0026#34;; using (AndroidJavaClass cls = new AndroidJavaClass(\u0026#34;java.util.Locale\u0026#34;)) { if (cls != null) { using (AndroidJavaObject locale = cls.CallStatic(\u0026#34;getDefault\u0026#34;)) { if (locale != null) { result = locale.Call(\u0026#34;getLanguage\u0026#34;) + \u0026#34;_\u0026#34; + locale.Call(\u0026#34;getDefault\u0026#34;); Debug.Log(\u0026#34;Android lang: \u0026#34; + result); } else { Debug.Log(\u0026#34;locale null\u0026#34;); } } } else { Debug.Log(\u0026#34;cls null\u0026#34;); } } return result; } 參考文章\niOS Platfrom 製作一個 .mm 文件，內容如下\nchar* cStringCopy(const char* string) { if(string == NULL){ return NULL; } char* newString = (char*)malloc(strlen(string) + 1); strcpy(newString, string); return newString; } extern \u0026#34;C\u0026#34; { const char* CurIOSLang () { NSArray *languages = [NSLocale preferredLanguages]; NSString *CurrentLanguage = [languages objectAtIndex:0]; return cStringCopy([CurrentLanguage UTF8String]); } } 在 C# 寫出 CurIOSLang 的接口\n[DllImport(\u0026#34;__Internal\u0026#34;)] private static extern string CurIOSLang(); 這樣就可以在 Unity 直接呼叫 CurIOSLan 取得 iOS 語系了。\n參考文章\n Github repo ","permalink":"https://wenrongdev.com/posts/unity-5.3-native-system-language/","summary":"使用 Unity 取得 Windows、Android、iOS 原生語系。","title":"Unity 5.3 Native System Language"},{"content":"前言 執行 WebGL 時都會有 Unity Logo \u0026amp; Loading。目前此專案修改 Unity Logo 的部分。\n需要更詳細的內容可以參考官方文件（Unity Document）。\n會比較建議使用 Responsive WebGL Template，省去自己測試修改的麻煩，不過還是需要改 Logo、Icon 的部分。\nSetting Up Your Template   Import Unitypackage\n  Set up Unity Player Setting Edit -\u0026gt; Project Settings -\u0026gt; Player, On the WebGL tab -\u0026gt; Resolution and Presentation -\u0026gt; Selcet LogoTemplates\n  Change Your Logo\nLogo 規格建議不要太大張。\nPath: root/Assets/WebGLTemplates/LogoTemplate/logo.png\n  GitHub repo 參考文章\n ","permalink":"https://wenrongdev.com/posts/unity-webgl-template/","summary":"執行 WebGL 時都會有 Unity Logo \u0026amp; Loading。目前此專案修改 Unity Logo 的部分。","title":"Unity WebGL Template"},{"content":"前言 此 Script 用於 WebGL RectMask2D 失去作用的簡易修正。\n建議還是先輸出測試確定 RectMask2D 失效再使用此 Script。\n使用方式 直接在 Canvas 物件底下 Add Component FixRectMask2dWebGL 即可。\nScript public class FixRectMask2dWebGL : MonoBehaviour { #if PlatformWebGL  private void Awake() { var items = GetComponentsInChildren\u0026lt;MaskableGraphic\u0026gt;(true); for (int i = 0; i \u0026lt; items.Length; i++) { Material m = items[i].materialForRendering; if (m != null) m.EnableKeyword(\u0026#34;UNITY_UI_CLIP_RECT\u0026#34;); } } #endif }  參考文章\n","permalink":"https://wenrongdev.com/posts/unity-webgl-rectmask2d-does-not-work/","summary":"用於 WebGL RectMask2D 失去作用的簡易修正。","title":"Unity WebGL RectMask2D Does Not Work"}]